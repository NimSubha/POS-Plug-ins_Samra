/*
	Microsoft Dynamics AX for Retail POS Upgrade Database Script
	DbVersion: 6.2.0.0
*/
ALTER TABLE TAXDATA
ADD
	[SALESTAXFORMTYPES_IN] [bigint] NULL
GO

CREATE TABLE [dbo].[RETAILSTORETABLE_IN](
	[RETAILSTORETABLE] [bigint] NULL,
	[SALESTAXFORMTYPES] [bigint] NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [PK_RETAILSTORETABLE_IN] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[RETAILSTORETABLE_IN] ADD DEFAULT ((0)) FOR [RETAILSTORETABLE]
GO
ALTER TABLE [dbo].[RETAILSTORETABLE_IN] ADD DEFAULT ((0)) FOR [SALESTAXFORMTYPES]
GO
ALTER TABLE [dbo].[RETAILSTORETABLE_IN]  WITH CHECK ADD CHECK  (([RECID]<>(0)))
GO 

ALTER TABLE RETAILBUTTONGRIDBUTTONS
ADD
	[BACKCOLOR] [int] NULL,
	[BACKCOLOR2] [int] NULL,
	[BORDERCOLOR] [int] NULL,
	[FONTCOLOR] [int] NULL,
	[GRADIENTMODE] [int] NULL,
	[NEWIMAGEALIGNMENT] [int] NULL,
	[NEWTEXTALIGNMENT] [int] NULL,
	[USECUSTOMLOOKANDFEEL] [int] NULL
GO

ALTER TABLE RETAILSHAREDPARAMETERS
ADD 	
	[LOCALSTOREID] [nvarchar](10) NOT NULL   DEFAULT (('')),
	[EFTPASSWORDENCRYPTION] [nvarchar](25) NOT NULL DEFAULT (('AES')),
	[TSPASSWORDENCRYPTION] [nvarchar](25) NOT NULL DEFAULT (('AES')),
	[STAFFPASSWORDHASH] [nvarchar](25) NOT NULL DEFAULT (('SHA512'))
GO

/*
	Add new devices
*/
ALTER TABLE RETAILHARDWAREPROFILE
ADD 	
	[SIGCAP] [int] NOT NULL DEFAULT (0),
	[SIGCAPDEVICENAME] [nvarchar](512)  NOT NULL DEFAULT (''),
	[SIGCAPDESCRIPTION] [nvarchar](60)  NOT NULL DEFAULT (''),
	[SIGCAPFORMNAME] [nvarchar](50) NOT NULL DEFAULT (''),
	[EFTCONNECTORPROPERTIES] [nvarchar](max) NULL,
	[SCANNER2] [int] NOT NULL DEFAULT (0),
	[SCANNER2DEVICENAME] [nvarchar](512) NULL,
	[SCANNER2DESCRIPTION] [nvarchar](60) NULL,
	[PRINTER2] [int] NOT NULL DEFAULT (0),
	[PRINTER2DEVICENAME] [nvarchar](512) NULL,
	[PRINTER2BINARYCONVERSION] [int] NOT NULL DEFAULT (0),
	[PRINTER2CHARACTERSET] [int] NOT NULL DEFAULT (0),
	[PRINTER2DESCRIPTION] [nvarchar](60) NULL,
	[PRINTER2DOCINSERTREMOVALTIMEOUT] [int] NOT NULL DEFAULT (0),
	[PRINTER2LOGOALIGNMENT] [int] NOT NULL DEFAULT (0),
	[PRINTER2LOGOBITMAP] [image] NULL,
	[PRINTER2LOGO] [int] NOT NULL DEFAULT (0),
	[DRAWER2] [int] NOT NULL DEFAULT (0),
	[DRAWER2DEVICENAME] [nvarchar](512) NULL,
	[DRAWER2DESCRIPTION] [nvarchar](60) NULL,
	[PRINTER2RECEIPTPROFILEID] [nvarchar](10) NOT NULL DEFAULT (''),
	[FISCALPRINTERMGMTREPORTPAFIDENTIFIC_BR] [nvarchar](20) NOT NULL DEFAULT (''),
	[FISCALPRINTERMGMTREPORTTENDERTYPE_BR] [nvarchar](20) NOT NULL DEFAULT (''),
	[FISCALPRINTERMGMTREPORTCONFIGPARAM_BR] [nvarchar](20) NOT NULL DEFAULT (''),
	[FISCALPRINTERTOTALIZERGIFTCARD_BR] [nvarchar](20) NOT NULL DEFAULT (''),
	[EFTCONNECTORNAME] [nvarchar](50) NULL
GO


ALTER TABLE [dbo].[RETAILPOSBATCHSTAGINGTABLE]
ADD 	
	[CASHDRAWER] [nvarchar](512) NULL DEFAULT ('')
GO

ALTER TABLE [dbo].[RETAILPOSBATCHSTAGINGTABLE] 
ALTER 
	COLUMN [STAFFID] [nvarchar](25) NOT NULL
GO
/* 
	Remove obsolete WindowsPrinterName and UseWindowsPrinter options
*/
ALTER TABLE [dbo].[RETAILFORMLAYOUT]
	DROP COLUMN USEWINDOWSPRINTER, WINDOWSPRINTERNAME 
GO
IF COL_LENGTH('dbo.RETAILFORMLAYOUT','WINDOWSPRINTERNAME') IS NOT NULL
BEGIN
	ALTER TABLE [dbo].[RETAILFORMLAYOUT] DROP COLUMN [WINDOWSPRINTERNAME]
END
GO


ALTER TABLE RETAILSTORETENDERTYPETABLE
ADD 	
	[SIGCAPENABLED] [int] NOT NULL DEFAULT (0),
	[SIGCAPMINAMOUNT] [numeric] (32, 16) NOT NULL DEFAULT (0),
	[FISCALPRINTERTENDERTYPE_BR] [nvarchar](20) NOT NULL DEFAULT ('')
GO

ALTER TABLE RETAILTRANSACTIONPAYMENTTRANS
ADD 	
	[SIGCAPDATA] [nvarchar](MAX) NULL
GO

/*
	Move fields from RetailStoreTable to RetailChannelTable
*/
ALTER TABLE RETAILCHANNELTABLE
ADD 	
	[INVENTLOCATION] [nvarchar](10) NOT NULL DEFAULT (''),
	[INVENTLOCATIONDATAAREAID] [nvarchar](4) NOT NULL DEFAULT (''),
	[CURRENCY] [nvarchar](3) NULL DEFAULT (''),
	[DEFAULTCUSTACCOUNT] [nvarchar](20) NOT NULL DEFAULT (''),
	[DEFAULTCUSTDATAAREAID] [nvarchar](4) NULL DEFAULT ('')
GO

UPDATE RETAILCHANNELTABLE
	SET RETAILCHANNELTABLE.INVENTLOCATION = RETAILSTORETABLE.INVENTLOCATION,
		RETAILCHANNELTABLE.INVENTLOCATIONDATAAREAID = RETAILSTORETABLE.INVENTLOCATIONDATAAREAID,
		RETAILCHANNELTABLE.CURRENCY = RETAILSTORETABLE.CURRENCY,
		RETAILCHANNELTABLE.DEFAULTCUSTACCOUNT = RETAILSTORETABLE.DEFAULTCUSTACCOUNT,
		RETAILCHANNELTABLE.DEFAULTCUSTDATAAREAID = RETAILSTORETABLE.DEFAULTCUSTDATAAREAID
	FROM RETAILCHANNELTABLE
	INNER JOIN RETAILSTORETABLE
	ON RETAILCHANNELTABLE.RECID = RETAILSTORETABLE.RECID
GO

ALTER TABLE RETAILSTORETABLE
DROP
	CONSTRAINT [DF__RBOSTORET__INVEN__72B4F664],
	CONSTRAINT [DF__RBOSTORET__CURRE__7591630F]
GO

ALTER TABLE RETAILSTORETABLE
DROP
	COLUMN [INVENTLOCATION],
	COLUMN [INVENTLOCATIONDATAAREAID],
	COLUMN [CURRENCY],
	COLUMN [DEFAULTCUSTACCOUNT],
	COLUMN [DEFAULTCUSTDATAAREAID]
GO

ALTER TABLE RETAILSTORETENDERTYPETABLE
DROP
	CONSTRAINT [DF__RBOSTORET__STORE__2DD5BC32]
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOSTORET__TENDE__2EC9E06B]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILSTORETENDERTYPETABLE] DROP CONSTRAINT [DF__RBOSTORET__TENDE__2EC9E06B]
END

GO
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILSTORETENDERTYPETABLE]') AND name = N'I_20149STORETYPEIDX')
ALTER TABLE [dbo].[RETAILSTORETENDERTYPETABLE] DROP CONSTRAINT [I_20149STORETYPEIDX]
GO
ALTER TABLE RETAILSTORETENDERTYPETABLE
ADD [CHANNEL] [bigint] NOT NULL DEFAULT(0)
GO
UPDATE RETAILSTORETENDERTYPETABLE
SET CHANNEL = S.RECID
	FROM RETAILSTORETENDERTYPETABLE T
	JOIN RETAILSTORETABLE S ON S.STORENUMBER = T.STOREID
GO
ALTER TABLE RETAILSTORETENDERTYPETABLE
DROP 
COLUMN [STOREID]
GO
ALTER TABLE [dbo].[RETAILSTORETENDERTYPETABLE] ADD  CONSTRAINT [I_20149STORETYPEIDX] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[CHANNEL] ASC,
	[TENDERTYPEID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE RETAILSTORETENDERTYPECARDTABLE
DROP
	CONSTRAINT [DF__RBOSTORET__STORE__17E67B13]
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOSTORET__TENDE__18DA9F4C]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILSTORETENDERTYPECARDTABLE] DROP CONSTRAINT [DF__RBOSTORET__TENDE__18DA9F4C]
END

GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOSTORET__CARDT__19CEC385]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILSTORETENDERTYPECARDTABLE] DROP CONSTRAINT [DF__RBOSTORET__CARDT__19CEC385]
END

GO
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILSTORETENDERTYPECARDTABLE]') AND name = N'I_20148STORETENDERCARDIDX')
ALTER TABLE [dbo].[RETAILSTORETENDERTYPECARDTABLE] DROP CONSTRAINT [I_20148STORETENDERCARDIDX]
GO
ALTER TABLE RETAILSTORETENDERTYPECARDTABLE
ADD [CHANNEL] [bigint] NOT NULL DEFAULT(0)
GO
UPDATE RETAILSTORETENDERTYPECARDTABLE
SET CHANNEL = S.RECID
	FROM RETAILSTORETENDERTYPECARDTABLE T
	JOIN RETAILSTORETABLE S ON S.STORENUMBER = T.STOREID
GO
ALTER TABLE RETAILSTORETENDERTYPECARDTABLE
DROP 
COLUMN [STOREID]
GO
ALTER TABLE [dbo].[RETAILSTORETENDERTYPECARDTABLE] ADD  CONSTRAINT [I_20148STORETENDERCARDIDX] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[CHANNEL] ASC,
	[TENDERTYPEID] ASC,
	[CARDTYPEID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DROPDEFAULTCONSTRAINT [RETAILINVENTTABLE], [BUSINESSGROUP]
GO

DROPDEFAULTCONSTRAINT [RETAILINVENTTABLE], [DIVISIONGROUP]
GO

DROPDEFAULTCONSTRAINT [RETAILINVENTTABLE], [ITEMTYPE]
GO

DROPDEFAULTCONSTRAINT [RETAILINVENTTABLE], [ITEMGROUP]
GO

DROPDEFAULTCONSTRAINT [RETAILINVENTTABLE], [ITEMDEPARTMENT]
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILINVENTTABLE]') AND name = N'I_20123ITEMIDGROUPIDX')
DROP INDEX [I_20123ITEMIDGROUPIDX] ON [dbo].[RETAILINVENTTABLE] WITH ( ONLINE = OFF )
GO
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILINVENTTABLE]') AND name = N'I_20123ITEMIDDEPARTMENTIDX')
DROP INDEX [I_20123ITEMIDDEPARTMENTIDX] ON [dbo].[RETAILINVENTTABLE] WITH ( ONLINE = OFF )
GO
ALTER TABLE RETAILINVENTTABLE
DROP
	COLUMN [ITEMTYPE],	
	COLUMN [ITEMGROUP],
	COLUMN [ITEMDEPARTMENT],
	COLUMN [BUSINESSGROUP],
	COLUMN [DIVISIONGROUP]
GO

CREATE TABLE [dbo].[ECORESATTRIBUTE](
	[NAME] [nvarchar](60) NOT NULL  DEFAULT (''),
	[ATTRIBUTETYPE] [bigint] NOT NULL DEFAULT ((0)),
	[ATTRIBUTEMODIFIER] [int] NOT NULL DEFAULT ((0)),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4333RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESATTRIBUTEDEFAULTVALUE](
	[VALUE] [bigint] NOT NULL DEFAULT ((0)),
	[ATTRIBUTE] [bigint] NOT NULL DEFAULT ((0)),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4334RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESATTRIBUTETRANSLATION](
	[DESCRIPTION] [nvarchar](255) NOT NULL DEFAULT (''),
	[LANGUAGE] [nvarchar](7) NOT NULL DEFAULT (''),
	[ATTRIBUTE] [bigint] NOT NULL DEFAULT ((0)),
	[FRIENDLYNAME] [nvarchar](120) NOT NULL DEFAULT (''),
	[HELPTEXT] [nvarchar](255) NOT NULL DEFAULT (''),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4335RECID] PRIMARY KEY NONCLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESATTRIBUTETYPE](
	[NAME] [nvarchar](60) NOT NULL DEFAULT (''),
	[DATATYPE] [int] NOT NULL DEFAULT ((0)),
	[ISENUMERATION] [int] NOT NULL DEFAULT ((0)),
	[ISHIDDEN] [int] NOT NULL DEFAULT ((0)),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4343RECID] PRIMARY KEY NONCLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESATTRIBUTEVALUE](
	[VALUE] [bigint] NOT NULL DEFAULT ((0)),
	[INSTANCEVALUE] [bigint] NOT NULL DEFAULT ((0)),
	[ATTRIBUTE] [bigint] NOT NULL DEFAULT ((0)),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4336RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESBOOLEANVALUE](
	[BOOLEANVALUE] [int] NOT NULL DEFAULT ((0)),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4353RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESCURRENCYVALUE](
	[CURRENCYVALUE] [numeric](32, 16) NULL DEFAULT (NULL),
	[CURRENCYCODE] [nvarchar](3) NULL DEFAULT (NULL),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4354RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESDATETIMEVALUE](
	[DATETIMEVALUE] [datetime] NULL DEFAULT (NULL),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4355RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESFLOATVALUE](
	[FLOATVALUE] [numeric](32, 16) NULL DEFAULT (NULL),
	[FLOATUNITOFMEASURE] [bigint] NULL DEFAULT (NULL),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4356RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESINTVALUE](
	[INTVALUE] [int] NULL DEFAULT (NULL),
	[INTUNITOFMEASURE] [bigint] NULL DEFAULT (NULL),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4357RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESREFERENCEVALUE](
	[REFFIELDID] [int] NULL DEFAULT (NULL),
	[REFRECID] [bigint] NULL DEFAULT (NULL),
	[REFTABLEID] [int] NULL DEFAULT (NULL),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4358RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESTEXTVALUE](
	[TEXTVALUE] [nvarchar](1999) NOT NULL DEFAULT (''),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4359RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESTEXTVALUETRANSLATION](
	[TEXTVALUE] [nvarchar](1999) NOT NULL DEFAULT (''),
	[TEXTVALUETABLE] [bigint] NOT NULL DEFAULT ((0)),
	[LANGUAGE] [nvarchar](7) NOT NULL DEFAULT (''),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4351RECID] PRIMARY KEY NONCLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESVALUE](
	[INSTANCERELATIONTYPE] [bigint] NOT NULL DEFAULT ((0)),
	[RELATIONTYPE] [bigint] NOT NULL DEFAULT ((0)),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4352RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESINSTANCEVALUE](
	[INSTANCERELATIONTYPE] [bigint] NOT NULL DEFAULT ((0)),
	[RELATIONTYPE] [bigint] NOT NULL DEFAULT ((0)),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4360RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESPRODUCTINSTANCEVALUE](
	[PRODUCT] [bigint] NOT NULL DEFAULT ((0)),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4361RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESCATEGORYHIERARCHY](
	[NAME] [nvarchar](128) NOT NULL DEFAULT (''),
	[HIERARCHYMODIFIER] [int] NOT NULL DEFAULT ((0)),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_2660RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESCATEGORYHIERARCHYROLE](
	[NAMEDCATEGORYHIERARCHYROLE] [int] NOT NULL DEFAULT ((0)),
	[CATEGORYHIERARCHY] [bigint] NOT NULL DEFAULT ((0)),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_2664RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESCATEGORYTRANSLATION](
	[SEARCHTEXT] [nvarchar](254) NOT NULL DEFAULT (''),
	[DESCRIPTION] [nvarchar](1000) NOT NULL DEFAULT (''),
	[FRIENDLYNAME] [nvarchar](254) NOT NULL DEFAULT (''),
	[CATEGORY] [bigint] NOT NULL DEFAULT ((0)),
	[LANGUAGEID] [nvarchar](7) NOT NULL DEFAULT (''),
	[RECVERSION] [int] NOT NULL DEFAULT ((1)),
	[RECID] [bigint] NOT NULL CHECK  (([RECID]<>(0))),
 CONSTRAINT [I_4593RECID] PRIMARY KEY NONCLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ECORESPRODUCTIMAGE](
	[DEFAULTIMAGE] [int] NOT NULL,
	[REFRECORD] [bigint] NOT NULL, 
	[MEDIUMSIZE] [varbinary](max) NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_5213RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[ECORESPRODUCTIMAGE]  WITH NOCHECK ADD CHECK  (([RECID]<>(0)))
GO
ALTER TABLE [dbo].[ECORESPRODUCTIMAGE] ADD  DEFAULT ((0)) FOR [DEFAULTIMAGE]
GO
ALTER TABLE [dbo].[ECORESPRODUCTIMAGE] ADD  DEFAULT ((0)) FOR [REFRECORD]
GO
ALTER TABLE [dbo].[ECORESPRODUCTIMAGE] ADD  DEFAULT (NULL) FOR [MEDIUMSIZE]
GO

/****** adding/removing columns to INVENTTABLE for Brazil ******/
ALTER TABLE [dbo].[INVENTTABLE]
ADD
	[TAXFISCALCLASSIFICATION_BR] [nvarchar](10) NOT NULL DEFAULT(''),
	[EXCEPTIONCODE_BR] [nvarchar](10) NOT NULL DEFAULT(''),
	[TAXSERVICECODE_BR] [nvarchar](10) NOT NULL DEFAULT(''),
	[INVENTPRODUCTTYPE_BR] [nvarchar](10) NOT NULL DEFAULT(''),
	[TAXATIONORIGIN_BR] [int] NOT NULL DEFAULT((0))
GO

DROPDEFAULTCONSTRAINT [INVENTTABLE], [PRODUCTTYPEID]
GO

DROPDEFAULTCONSTRAINT [INVENTTABLE], [TAXATIONORIGIN]
GO

ALTER TABLE [dbo].[INVENTTABLE]
DROP
	COLUMN [PRODUCTTYPEID],
	COLUMN [TAXATIONORIGIN]
GO

/****** Recreating View [dbo].[ASSORTEDINVENTITEMS] ******/
/** Note: This has to be done after the drop/adding of columns of INVENTTABLE **/
ALTER VIEW [dbo].[ASSORTEDINVENTITEMS]
AS
SELECT RCT.RECID AS STORERECID, IT.*, ISNULL(IIGI.ITEMGROUPID, '') AS ITEMGROUPID
FROM INVENTTABLE IT LEFT JOIN INVENTITEMGROUPITEM IIGI ON IT.DATAAREAID = IIGI.ITEMDATAAREAID AND IT.ITEMID = IIGI.ITEMID, RETAILCHANNELTABLE RCT
WHERE EXISTS (
	SELECT RAE.RECID
	FROM RETAILASSORTMENTEXPLODED RAE
	WHERE
		RAE.OMOPERATINGUNITID = RCT.OMOPERATINGUNITID AND
		RAE.ITEMID = IT.ITEMID AND
		RAE.CHANNELDATAAREAID = IT.DATAAREAID AND
		RAE.VALIDFROM <= GETUTCDATE() AND
		RAE.VALIDTO >= GETUTCDATE()
)
GO

/*
 * Create VariantsView
 */
IF OBJECT_ID(N'dbo.VARIANTSVIEW', N'V') IS NULL
BEGIN
    EXEC ('CREATE VIEW VARIANTSVIEW AS (SELECT 1 AS SAMPLE)');
    IF (@@ERROR = 0)
    BEGIN
        PRINT 'Successfully created empty view: VARIANTSVIEW.';
    END;
    ELSE
    BEGIN 
        PRINT 'FAILED to create view: VARIANTSVIEW.';
    END;
END;
GO
ALTER VIEW VARIANTSVIEW AS (
	SELECT AIT.ITEMID, IDC.RETAILVARIANTID AS VARIANTID, I.INVENTDIMID AS INVENTDIMID, IDC.DISTINCTPRODUCTVARIANT,  
	I.INVENTSIZEID AS SIZEID, I.INVENTCOLORID AS COLORID, I.INVENTSTYLEID AS STYLEID, I.CONFIGID AS CONFIGID,
	ISNULL(DVC.DESCRIPTION, '') AS COLOR, ISNULL(DVSZ.DESCRIPTION, '') AS SIZE, ISNULL(DVST.DESCRIPTION, '') AS STYLE, 
	ISNULL(DVCFG.DESCRIPTION, '') AS CONFIG, B.ITEMBARCODE, ISNULL(B.UNITID, '') AS UNITID, IDC.STORERECID, IDC.DATAAREAID,
	IDC.DISTINCTPRODUCTVARIANT AS RECID
	FROM ASSORTEDINVENTDIMCOMBINATION IDC
	INNER JOIN ASSORTEDINVENTITEMS AIT ON AIT.ITEMID = IDC.ITEMID and AIT.STORERECID = IDC.STORERECID
	INNER JOIN INVENTDIM I ON I.INVENTDIMID = IDC.INVENTDIMID AND I.DATAAREAID = IDC.DATAAREAID

	LEFT OUTER JOIN ECORESCOLOR ON ECORESCOLOR.NAME = I.INVENTCOLORID
	LEFT OUTER JOIN ECORESPRODUCTMASTERCOLOR ON (ECORESPRODUCTMASTERCOLOR.COLOR = ECORESCOLOR.RECID)
	AND (ECORESPRODUCTMASTERCOLOR.COLORPRODUCTMASTER = AIT.PRODUCT)
	LEFT OUTER JOIN ECORESPRODUCTMASTERDIMENSIONVALUE DVC ON DVC.RECID = ECORESPRODUCTMASTERCOLOR.RECID

	LEFT OUTER JOIN ECORESSIZE ON ECORESSIZE.NAME = I.INVENTSIZEID
	LEFT OUTER JOIN ECORESPRODUCTMASTERSIZE ON (ECORESPRODUCTMASTERSIZE.SIZE_ = ECORESSIZE.RECID)
	AND (ECORESPRODUCTMASTERSIZE.SIZEPRODUCTMASTER = AIT.PRODUCT)
	LEFT OUTER JOIN ECORESPRODUCTMASTERDIMENSIONVALUE DVSZ ON DVSZ.RECID = ECORESPRODUCTMASTERSIZE.RECID

	LEFT OUTER JOIN ECORESSTYLE ON ECORESSTYLE.NAME = I.INVENTSTYLEID
	LEFT OUTER JOIN ECORESPRODUCTMASTERSTYLE ON (ECORESPRODUCTMASTERSTYLE.STYLE = ECORESSTYLE.RECID)
	AND (ECORESPRODUCTMASTERSTYLE.STYLEPRODUCTMASTER = AIT.PRODUCT)
	LEFT OUTER JOIN ECORESPRODUCTMASTERDIMENSIONVALUE DVST ON DVST.RECID = ECORESPRODUCTMASTERSTYLE.RECID

	LEFT OUTER JOIN ECORESCONFIGURATION ON ECORESCONFIGURATION.NAME = I.CONFIGID
	LEFT OUTER JOIN ECORESPRODUCTMASTERCONFIGURATION ON (ECORESPRODUCTMASTERCONFIGURATION.CONFIGURATION = ECORESCONFIGURATION.RECID)
	AND (ECORESPRODUCTMASTERCONFIGURATION.CONFIGPRODUCTMASTER = AIT.PRODUCT)
	LEFT OUTER JOIN ECORESPRODUCTMASTERDIMENSIONVALUE DVCFG ON DVCFG.RECID = ECORESPRODUCTMASTERCONFIGURATION.RECID

	LEFT OUTER JOIN INVENTITEMBARCODE B ON IDC.RETAILVARIANTID = B.RBOVARIANTID AND IDC.DATAAREAID = B.DATAAREAID)
GO


/*
 * Create ItemsView
 */
IF OBJECT_ID(N'dbo.ITEMSVIEW', N'V') IS NULL
BEGIN
	EXEC ('CREATE VIEW ITEMSVIEW AS (SELECT 1 AS SAMPLE)');
	IF (@@ERROR = 0)
	BEGIN
		PRINT 'Successfully created empty view: ITEMSVIEW.';
	END;
	ELSE
	BEGIN 
		PRINT 'FAILED to create view: ITEMSVIEW.';
	END;
END;
GO
ALTER VIEW ITEMSVIEW AS (
	SELECT IT.[RECID], IT.[ITEMID], ERPT.[NAME], ERPT.[DESCRIPTION], ITM.[PRICE], ITM.[UNITID], IT.[PRODUCT],
   		ITM.[MARKUPGROUPID], ITM.[MARKUP], ITM.[ALLOCATEMARKUP], ITM.[PRICEQTY]
	
	FROM INVENTTABLE IT
	INNER JOIN ECORESPRODUCTTRANSLATION ERPT ON ERPT.RECID = IT.PRODUCT
	INNER JOIN INVENTTABLEMODULE ITM ON ITM.MODULETYPE = 2 AND ITM.ITEMID = IT.ITEMID AND ITM.DATAAREAID = IT.DATAAREAID	
)
GO

ALTER TABLE RETAILTRANSACTION
ADD
	[TRANSACTIONID] [uniqueidentifier] NOT NULL DEFAULT('00000000-0000-0000-0000-000000000000'),
	[DELETEDDATE] [datetime] NULL
GO

ALTER TABLE RETAILTRANSACTION
DROP
	CONSTRAINT [PK_RETAILTRANSACTION]
GO

UPDATE RETAILTRANSACTION
	SET TRANSACTIONID = '00000000-0000-0000-0000-000000000000'
	WHERE TRANSACTIONID = NULL
GO

ALTER TABLE RETAILTRANSACTION
ADD
	CONSTRAINT [PK_RETAILTRANSACTION] PRIMARY KEY CLUSTERED
	(
		[STOREID] ASC,
		[TERMINALID] ASC,
		[DATAAREAID] ASC,
		[TRANSACTIONID] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

/*
 * Update RetailTransactionTable with additional Sales Order fields
 */
ALTER TABLE [dbo].[RETAILTRANSACTIONTABLE] ADD
	[INVENTLOCATIONID] [nvarchar](10) NOT NULL DEFAULT (''),
	[INVENTSITEID] [nvarchar](10) NOT NULL DEFAULT (''),
	[DLVMODE] [nvarchar](10) NOT NULL DEFAULT (''),
	[RECEIPTDATEREQUESTED] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[SHIPPINGDATEREQUESTED] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[CHANNELREFERENCEID] [nvarchar](10) NOT NULL DEFAULT (''),
	[LOGISTICSPOSTALADDRESS] [bigint] NOT NULL DEFAULT ((0))
GO

/*
 * Update RetailTransactionSalesTrans with additional Sales Order fields
 */
ALTER TABLE [dbo].[RETAILTRANSACTIONSALESTRANS] ADD
	[INVENTLOCATIONID] [nvarchar](10) NOT NULL DEFAULT ('') ,
	[INVENTSITEID] [nvarchar](10) NOT NULL DEFAULT (''),
	[DLVMODE] [nvarchar](10) NOT NULL DEFAULT (''),
	[RECEIPTDATEREQUESTED] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[SHIPPINGDATEREQUESTED] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[LISTINGID] [nvarchar](50) NOT NULL DEFAULT (''),
	[LOGISTICSPOSTALADDRESS] [bigint] NOT NULL DEFAULT (0),
	[RETURNLINENUM] [numeric](32,16) NOT NULL DEFAULT (0),
	[RETURNSTORE] [nvarchar](10) NOT NULL DEFAULT (''),
	[RETURNTERMINALID] [nvarchar](10) NOT NULL DEFAULT ('')
GO

/*
 * Update RetailTransactionPaymentTrans with additional payment auhtorization fields
 */
ALTER TABLE [dbo].[RETAILTRANSACTIONPAYMENTTRANS] ADD  
	[ISPREPAYMENT] [int] NOT NULL DEFAULT (0) ,
	[PAYMENTAUTHORIZATION] [nvarchar](max) NOT NULL DEFAULT ('') 	
GO

/*
 * Creating table [dbo].[RETAILTRANSACTIONMARKUPTRANS] 
 */
CREATE TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[RECVERSION] [int] NOT NULL,
	[RECID] [bigint] NOT NULL,
	[CURRENCYCODE] [nvarchar](3) NOT NULL,
	[TAXGROUP] [nvarchar](10) NOT NULL,
	[TAXITEMGROUP] [nvarchar](10) NOT NULL,
	[VALUE] [numeric](32, 16) NOT NULL,
	[MARKUPCODE] [nvarchar](10) NOT NULL,
	[STORE] [nvarchar](10) NOT NULL,
	[TERMINALID] [nvarchar](10) NOT NULL,
	[TRANSACTIONID] [nvarchar](10) NOT NULL,
	[SALELINENUM] [numeric](32, 16) NOT NULL,
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
	[MARKUPLINENUM] [numeric](32, 16) NOT NULL,
 CONSTRAINT [I_101234RECID] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[STORE] ASC,
	[TERMINALID] ASC,
	[TRANSACTIONID] ASC,
	[SALELINENUM] ASC,
	[MARKUPLINENUM] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS]  WITH CHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  DEFAULT ('dat') FOR [DATAAREAID]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  DEFAULT ((1)) FOR [RECVERSION]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  DEFAULT ('') FOR [CURRENCYCODE]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  DEFAULT ('') FOR [TAXGROUP]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  DEFAULT ('') FOR [TAXITEMGROUP]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  DEFAULT ((0)) FOR [VALUE]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  DEFAULT ('') FOR [MARKUPCODE]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  DEFAULT ('') FOR [STORE]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  DEFAULT ('') FOR [TERMINALID]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  DEFAULT ('') FOR [TRANSACTIONID]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  DEFAULT ((0)) FOR [SALELINENUM]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  DEFAULT ((0)) FOR [MARKUPLINENUM]
GO

/*
 * GETTAXREGIME STORED PROCEDURE FOR DESTINATION BASED TAXING
 */
IF OBJECT_ID(N'dbo.GETTAXREGIME', N'P') IS NULL
BEGIN
    EXEC ('CREATE PROCEDURE GETTAXREGIME AS (SELECT 1)');
    IF (@@ERROR = 0)
    BEGIN
        PRINT 'Successfully created stored procedure : GETTAXREGIME';
    END;
    ELSE
    BEGIN 
        PRINT 'Failed to create stored procedure: GETTAXREGIME';
    END;
END;
ELSE
BEGIN
    PRINT 'Skipped creating stored procedure: GETTAXREGIME';
END
GO

ALTER PROCEDURE [dbo].[GETTAXREGIME]
	@COUNTRYREGIONID NVARCHAR(10),
	@STATEID NVARCHAR(10) = NULL,
	@COUNTYID NVARCHAR(10)        = NULL,
	@CITY NVARCHAR(60)            = NULL,
	@DISTRICT NVARCHAR(60)        = NULL,
	@ZIPCODE NVARCHAR(10)   = NULL
	AS
BEGIN
	SET NOCOUNT ON

	-- CountryId is mandatory
	IF (@COUNTRYREGIONID IS NULL) 
	BEGIN
		RAISERROR (N'COUNTRY/REGIONID MANDATORY', 16, 1)
		RETURN;
	END

	-- For Optional Columns, there is three possible state we can run into
	-- 1) a value is passed in (like @STATEPROVINCEID = 'WA' )--> For this case, only match is possible when @STATEPROVINCEID = STATEPROVINCEID 
	-- 2) a value is NOT passed in (like @STATEPROVINCEID = NULL )--> For this case, we do have two sub-cases
	-- 2a) @STATEPROVINCEID = NULL and STATEPROVINCEID is also NULL --> This is a match
	-- 2b) @STATEPROVINCEID = NULL but STATEPROVINCEID != NULL, i.e. has a value in it --> This is no match. The data in the table is more complete than what it is passed in
	SELECT * FROM DBO.RETAILTAXFILTERS RTF
	WHERE
	 COUNTRYREGIONID   = @COUNTRYREGIONID 
		AND (STATEID         = @STATEID OR (@STATEID IS NULL AND STATEID IS NULL))
		AND (COUNTYID        = @COUNTYID OR (@COUNTYID IS NULL AND COUNTYID IS NULL)) 
		AND (CITY			 = @CITY OR (@CITY IS NULL AND CITY IS NULL))
		AND (DISTRICT        = @DISTRICT OR (@DISTRICT IS NULL AND DISTRICT IS NULL))
		AND (ZIPCODE         = @ZIPCODE OR (@ZIPCODE IS NULL AND ZIPCODE IS NULL))
END
GO

/*
 * Adding table RETAILSTORELOCATORGROUP
 */
CREATE TABLE [dbo].[RETAILSTORELOCATORGROUP](
	[NAME] [nvarchar](25) NOT NULL,
	[DESCRIPTION] [nvarchar](60) NOT NULL,
	[RECID] [bigint] NOT NULL,
    CONSTRAINT [I_101290RECID] PRIMARY KEY CLUSTERED 
    (
	    [RECID] ASC
    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[RETAILSTORELOCATORGROUP]  WITH CHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[RETAILSTORELOCATORGROUP] ADD  DEFAULT ('') FOR [NAME]
GO

ALTER TABLE [dbo].[RETAILSTORELOCATORGROUP] ADD  DEFAULT ('') FOR [DESCRIPTION]
GO

/*
 * Adding table RETAILSTORELOCATORGROUPMEMBER
 */
CREATE TABLE [dbo].[RETAILSTORELOCATORGROUPMEMBER](
	[RECID] [bigint] NOT NULL,
	[STORE] [bigint] NOT NULL,
	[LOCATORGROUP] [bigint] NOT NULL,
	CONSTRAINT [I_101291RECID] PRIMARY KEY CLUSTERED 
	(
		[RECID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[RETAILSTORELOCATORGROUPMEMBER]  WITH CHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[RETAILSTORELOCATORGROUPMEMBER] ADD  DEFAULT ((0)) FOR [STORE]
GO

ALTER TABLE [dbo].[RETAILSTORELOCATORGROUPMEMBER] ADD  DEFAULT ((0)) FOR [LOCATORGROUP]
GO

/*
 * Adding table RETAILSTORELOCATORGROUPOWNER
 */
CREATE TABLE [dbo].[RETAILSTORELOCATORGROUPOWNER](
	[RECID] [bigint] NOT NULL,
	[LOCATORGROUP] [bigint] NOT NULL,
	[CHANNEL] [bigint] NOT NULL,
	CONSTRAINT [I_101292RECID] PRIMARY KEY CLUSTERED 
	(
		[RECID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[RETAILSTORELOCATORGROUPOWNER]  WITH CHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[RETAILSTORELOCATORGROUPOWNER] ADD  DEFAULT ((0)) FOR [LOCATORGROUP]
GO

ALTER TABLE [dbo].[RETAILSTORELOCATORGROUPOWNER] ADD  DEFAULT ((0)) FOR [CHANNEL]
GO


/*
* Create [STOREINFORMATIONVIEW]
*/
CREATE VIEW [dbo].[STOREINFORMATIONVIEW] AS
(
	-- 4326 maps to the WGS 84 spatial reference system. Use link to see more info.
	-- http://msdn.microsoft.com/en-us/library/bb964707.aspx

	SELECT
		RST.STORENUMBER,
		RCT2.INVENTLOCATION,
		DPT.NAME,
		RCT2.RECID AS CHANNELID,
		GEOGRAPHY::STGeomFromText('POINT(' + CONVERT(VARCHAR(100), LPA.LONGITUDE) + ' ' +  CONVERT(VARCHAR(100), LPA.LATITUDE) + ')', 4326) AS GEOLOCATION,
		LPA.*
	FROM RETAILSTORETABLE AS RST
	INNER JOIN RETAILCHANNELTABLE AS RCT2
		ON RCT2.RECID = RST.RECID
	INNER JOIN OMOPERATINGUNIT AS OU
		ON OU.RECID = RCT2.OMOPERATINGUNITID
	INNER JOIN DIRPARTYTABLE AS DPT
		ON DPT.RECID = OU.RECID
	INNER JOIN DIRPARTYLOCATION AS DPL
		ON DPL.PARTY = DPT.RECID
	INNER JOIN LOGISTICSPOSTALADDRESS AS LPA
		ON LPA.LOCATION = DPL.LOCATION
	WHERE RST.RECID IN (
	    SELECT DISTINCT RSLGM.STORE
    	FROM RETAILCHANNELTABLE AS RCT1
        INNER JOIN RETAILSTORELOCATORGROUPOWNER AS RSLGO
	        ON RSLGO.CHANNEL = RCT1.RECID
        INNER JOIN RETAILSTORELOCATORGROUP AS RSLG
	        ON RSLGO.LOCATORGROUP = RSLGO.RECID
        INNER JOIN RETAILSTORELOCATORGROUPMEMBER AS RSLGM
	        ON RSLGM.LOCATORGROUP = RSLG.RECID
	) AND DPL.IsPrimary = 1
)
GO

/*
* Create function to return store information
*/

CREATE FUNCTION GETNEARBYSTORESFUNCTION (	
    @CHANNELID		        BIGINT,
	@LATITUDE		        FLOAT, 
	@LONGITUDE		        FLOAT, 
	@SEARCHDISTANCE	        FLOAT,
	@UNITCONVERSION         FLOAT
)
RETURNS @GETNEARBYSTORESRESULT TABLE
(
    [DISTANCE] [FLOAT] NOT NULL,
    [STORENUMBER] [nvarchar](10) NOT NULL,
    [NAME] [nvarchar](100) NOT NULL,
    [CHANNELID] [bigint] NOT NULL,
    [INVENTLOCATION] [nvarchar](10) NOT NULL,
    [GEOLOCATION] [GEOGRAPHY] NOT NULL,
	[ADDRESS] [nvarchar](250) NOT NULL,
	[COUNTRYREGIONID] [nvarchar](10) NOT NULL,
	[ZIPCODE] [nvarchar](10) NOT NULL,
	[STATE] [nvarchar](10) NOT NULL,
	[COUNTY] [nvarchar](10) NOT NULL,
	[CITY] [nvarchar](60) NOT NULL,
	[STREET] [nvarchar](250) NOT NULL,
	[LATITUDE] [numeric](32, 16) NOT NULL,
	[LONGITUDE] [numeric](32, 16) NOT NULL,
	[TIMEZONE] [int] NOT NULL,
	[STREETNUMBER] [nvarchar](20) NOT NULL,
	[BUILDINGCOMPLIMENT] [nvarchar](60) NOT NULL,
	[POSTBOX] [nvarchar](20) NOT NULL,
	[CITYRECID] [bigint] NOT NULL,
	[DISTRICT] [bigint] NOT NULL,
	[LOCATION] [bigint] NOT NULL,
	[ZIPCODERECID] [bigint] NOT NULL,
	[VALIDTO] [datetime] NOT NULL,
	[VALIDTOTZID] [int] NOT NULL,
	[VALIDFROM] [datetime] NOT NULL,
	[VALIDFROMTZID] [int] NOT NULL,
	[DISTRICTNAME] [nvarchar](60) NOT NULL,
	[MODIFIEDDATETIME] [datetime] NOT NULL,
	[RECID] [bigint] NOT NULL
)
AS
BEGIN
    DECLARE @CENTERGEOLOCATION GEOGRAPHY;
    
	-- 4326 maps to the WGS 84 spatial reference system. Use link to see more info.
	-- http://msdn.microsoft.com/en-us/library/bb964707.aspx
	SET @CENTERGEOLOCATION = GEOGRAPHY::STGeomFromText('POINT(' + CONVERT(VARCHAR(100), @LONGITUDE) + ' ' +  CONVERT(VARCHAR(100), @LATITUDE) + ')', 4326)
	
	INSERT @GETNEARBYSTORESRESULT	
	SELECT 
       GEOLOCATION.STDistance(@CENTERGEOLOCATION) / @UNITCONVERSION AS DISTANCE
	  ,[STORENUMBER]
      ,[NAME]
      ,[CHANNELID]
      ,[INVENTLOCATION]      
      ,[GEOLOCATION]
      ,[ADDRESS]
      ,[COUNTRYREGIONID]
      ,[ZIPCODE]
      ,[STATE]
      ,[COUNTY]
      ,[CITY]
      ,[STREET]
      ,[LATITUDE]
      ,[LONGITUDE]
      ,[TIMEZONE]
      ,[STREETNUMBER]
      ,[BUILDINGCOMPLIMENT]
      ,[POSTBOX]
      ,[CITYRECID]
      ,[DISTRICT]
      ,[LOCATION]
      ,[ZIPCODERECID]
      ,[VALIDTO]
      ,[VALIDTOTZID]
      ,[VALIDFROM]
      ,[VALIDFROMTZID]
      ,[DISTRICTNAME]
      ,[MODIFIEDDATETIME]
      ,[RECID]
    FROM STOREINFORMATIONVIEW 
	WHERE CHANNELID = @CHANNELID AND 
		GEOLOCATION.STDistance(@CENTERGEOLOCATION) <= (@SEARCHDISTANCE * @UNITCONVERSION) 
	ORDER BY DISTANCE
    RETURN 
END
GO


/* 
 * Add delivery mode charge group field to delivery mode
 */
ALTER TABLE [dbo].[DLVMODE]
	ADD [MARKUPGROUP] [nvarchar](10) DEFAULT('') NOT NULL
GO

/*
 * Create Auto-charge header table
 */
CREATE TABLE [dbo].[MARKUPAUTOTABLE](
	[MODULETYPE] [int] DEFAULT((0)) NOT NULL,
	[ACCOUNTRELATION] [nvarchar](20) DEFAULT('') NOT NULL,
	[ITEMRELATION] [nvarchar](20) DEFAULT('') NOT NULL,
	[ACCOUNTCODE] [int] DEFAULT((0)) NOT NULL,
	[ITEMCODE] [int] DEFAULT((0)) NOT NULL,
	[MODULECATEGORY] [int] DEFAULT((0)) NOT NULL,
	[RETURNRELATION] [nvarchar](10) DEFAULT('') NOT NULL,
	[MARKUPRETURN] [int] DEFAULT((0)) NOT NULL,
	[RETAILCONCESSIONFEE] [int] DEFAULT((0)) NOT NULL,
	[DLVMODECODE] [int] DEFAULT((0)) NOT NULL,
	[DLVMODERELATION] [nvarchar](20) NOT NULL,
	[DATAAREAID] [nvarchar](4) DEFAULT('dat') NOT NULL,
	[RECVERSION] [int] DEFAULT((1)) NOT NULL,
	[PARTITION] [bigint] DEFAULT ((5637144576.)) NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_MARKUPIDX] PRIMARY KEY CLUSTERED 
(
	[PARTITION] ASC,
	[DATAAREAID] ASC,
	[MODULECATEGORY] ASC,
	[MODULETYPE] ASC,
	[ITEMCODE] ASC,
	[ITEMRELATION] ASC,
	[ACCOUNTCODE] ASC,
	[ACCOUNTRELATION] ASC,
	[MARKUPRETURN] ASC,
	[RETURNRELATION] ASC,
	[RETAILCONCESSIONFEE] ASC,
	[DLVMODECODE] ASC,
	[DLVMODERELATION] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[MARKUPAUTOTABLE]  WITH NOCHECK ADD CHECK  (([RECID]<>(0)))
GO

/*
 * Create Auto-charge line table
 */
CREATE TABLE [dbo].[MARKUPAUTOLINE](
	[TABLETABLEID] [int] DEFAULT((0)) NOT NULL,
	[TABLERECID] [bigint] DEFAULT((0)) NOT NULL,
	[LINENUM] [numeric](32, 16) DEFAULT((0)) NOT NULL,
	[MARKUPCODE] [nvarchar](10) DEFAULT('') NOT NULL,
	[CURRENCYCODE] [nvarchar](3) DEFAULT('') NOT NULL,
	[VALUE] [numeric](32, 16) DEFAULT((0)) NOT NULL,
	[TXT] [nvarchar](60) DEFAULT('') NOT NULL,
	[TAXGROUP] [nvarchar](10) DEFAULT('') NOT NULL,
	[TAXITEMGROUP] [nvarchar](10) DEFAULT('') NOT NULL,
	[MARKUPCATEGORY] [int] DEFAULT((0)) NOT NULL,
	[MODULECATEGORY] [int] DEFAULT((0)) NOT NULL,
	[MODULETYPE] [int] DEFAULT((0)) NOT NULL,
	[KEEP] [int] DEFAULT((0)) NOT NULL,
	[MARKUPCURRENCYCODE] [nvarchar](3) DEFAULT('') NOT NULL,
	[NOTIONALCHARGES_IN] [int] DEFAULT((0)) NOT NULL,
	[NOTIONALPCT_IN] [numeric](32, 16) DEFAULT((0)) NOT NULL,
	[CUSTOMSASSESSABLEVALUE_IN] [int] DEFAULT((0)) NOT NULL,
	[FROMAMOUNT] [numeric](32, 16) DEFAULT((0)) NOT NULL,
	[TOAMOUNT] [numeric](32, 16) DEFAULT((0)) NOT NULL,
	[DATAAREAID] [nvarchar](4) DEFAULT('dat') NOT NULL,
	[RECVERSION] [int] DEFAULT((1)) NOT NULL,
	[PARTITION] [bigint] DEFAULT((5637144576.)) NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_226TABLEIDX] PRIMARY KEY CLUSTERED 
(
	[PARTITION] ASC,
	[DATAAREAID] ASC,
	[TABLERECID] ASC,
	[TABLETABLEID] ASC,
	[LINENUM] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[MARKUPAUTOLINE]  WITH NOCHECK ADD CHECK  (([RECID]<>(0)))
GO

/*
 * Create Auto-charge configuration view
 */
IF OBJECT_ID(N'dbo.MARKUPAUTOCONFIGURATIONVIEW', N'V') IS NULL
BEGIN
	EXEC ('CREATE VIEW MARKUPAUTOCONFIGURATIONVIEW AS (SELECT 1 AS SAMPLE)');
	IF (@@ERROR = 0)
	BEGIN
		PRINT 'Successfully created empty view: MARKUPAUTOCONFIGURATIONVIEW.';
	END;
	ELSE
	BEGIN 
		PRINT 'FAILED to create view: MARKUPAUTOCONFIGURATIONVIEW.';
	END;
END;
GO
ALTER VIEW [dbo].[MARKUPAUTOCONFIGURATIONVIEW] AS 
(
	SELECT 
		mat.MODULECATEGORY,
		mat.MODULETYPE,
		mat.ACCOUNTCODE,
		mat.ACCOUNTRELATION,
		mat.ITEMCODE,
		mat.ITEMRELATION,
		mat.DLVMODECODE,
		mat.DLVMODERELATION,
		mal.VALUE,
		mal.CURRENCYCODE,
		mt.MARKUPCODE,
		mal.MARKUPCATEGORY AS MARKUPMETHOD,
		mal.TAXGROUP AS SALESTAXGROUP,
		mt.TAXITEMGROUP AS ITEMTAXGROUP,
		mal.FROMAMOUNT,
		mal.TOAMOUNT,
		mal.RECID
	FROM MARKUPAUTOTABLE AS mat
		JOIN MARKUPAUTOLINE AS mal
			-- join where auto charge lines point to autocharge table
			ON 227 = mal.TABLETABLEID AND mat.RECID = mal.TABLERECID
		JOIN MARKUPTABLE AS mt
			-- join to charge code to get charge code tax group
			ON mal.MARKUPCODE = mt.MARKUPCODE
			AND mal.MODULETYPE = mt.MODULETYPE
		-- only fetch sales and delivery charges
		WHERE (mat.MODULETYPE = 1 OR mat.MODULETYPE = 3)
)
GO

ALTER TABLE [dbo].[RETAILVISUALPROFILE]
ADD
	[POSSKINNAME] [nvarchar](100) NULL,
	[SKINFILE] [varbinary](max) NULL
GO

/****** Object:  Table [dbo].[RETAILTAXFILTERS]    Script Date: 03/17/2012 16:15:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[RETAILTAXFILTERS](
	[CITY] [bigint] NOT NULL,
	[COUNTRYREGIONID] [nvarchar](10) NOT NULL,
	[COUNTYID] [nvarchar](10) NOT NULL,
	[DISTRICT] [bigint] NOT NULL,
	[STATEID] [nvarchar](10) NOT NULL,
	[TAXGROUPHEADING] [nvarchar](10) NOT NULL,
	[ZIPCODE] [bigint] NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[RECVERSION] [int] NOT NULL,
	[PARTITION] [bigint] NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_100813RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[RETAILTAXFILTERS]  WITH CHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[RETAILTAXFILTERS] ADD  DEFAULT ((0)) FOR [CITY]
GO

ALTER TABLE [dbo].[RETAILTAXFILTERS] ADD  DEFAULT ('') FOR [COUNTRYREGIONID]
GO

ALTER TABLE [dbo].[RETAILTAXFILTERS] ADD  DEFAULT ('') FOR [COUNTYID]
GO

ALTER TABLE [dbo].[RETAILTAXFILTERS] ADD  DEFAULT ((0)) FOR [DISTRICT]
GO

ALTER TABLE [dbo].[RETAILTAXFILTERS] ADD  DEFAULT ('') FOR [STATEID]
GO

ALTER TABLE [dbo].[RETAILTAXFILTERS] ADD  DEFAULT ('') FOR [TAXGROUPHEADING]
GO

ALTER TABLE [dbo].[RETAILTAXFILTERS] ADD  DEFAULT ((0)) FOR [ZIPCODE]
GO

ALTER TABLE [dbo].[RETAILTAXFILTERS] ADD  DEFAULT ('dat') FOR [DATAAREAID]
GO

ALTER TABLE [dbo].[RETAILTAXFILTERS] ADD  DEFAULT ((1)) FOR [RECVERSION]
GO

ALTER TABLE [dbo].[RETAILTAXFILTERS] ADD  DEFAULT ((5637144576.)) FOR [PARTITION]
GO

-- NOTE: this procedure is meant to validate only, does not provide any suggestion to correct a given address, in case  it is invalid
-- TODO:ibrahimd the following error codes are supposed to be changed after Xiaoqiao's code is in. utlPopDBErrorFunctions.sql
IF OBJECT_ID(N'dbo.VALIDATEADDRESS', N'P') IS NULL
BEGIN
    EXEC ('CREATE PROCEDURE VALIDATEADDRESS AS (SELECT 1)');
    IF (@@ERROR = 0)
    BEGIN
        PRINT 'Successfully created stored procedure : VALIDATEADDRESS';
    END;
    ELSE
    BEGIN 
        PRINT 'Failed to create stored procedure: VALIDATEADDRESS';
    END;
END;
ELSE
BEGIN
    PRINT 'Skipped creating stored procedure: VALIDATEADDRESS';
END
GO

ALTER PROCEDURE [dbo].[VALIDATEADDRESS]
	@COUNTRYREGIONID NVARCHAR(10),
	@STATEPROVINCEID NVARCHAR(10) = NULL,
	@COUNTYID NVARCHAR(10)        = NULL,
	@CITY NVARCHAR(60)            = NULL,
	@DISTRICT NVARCHAR(60)        = NULL,
	@ZIPPOSTALCODE NVARCHAR(10)   = NULL
AS
BEGIN
SET NOCOUNT ON


DECLARE @i_ReturnCode               INT;
DECLARE @i_TransactionIsOurs        INT;
DECLARE @i_Error                    INT;

-- CountryId is mandatory according to Ax schema
IF (@COUNTRYREGIONID IS NULL)
BEGIN
	SET @i_ReturnCode           = 1 ; -- invalid countryid
	GOTO exit_label;
END	

IF NOT EXISTS(SELECT 1 FROM DBO.LOGISTICSADDRESSCOUNTRYREGION LCNTRY WHERE LCNTRY.COUNTRYREGIONID = @COUNTRYREGIONID)
BEGIN
	SET @i_ReturnCode           = 1 ; -- invalid country
	GOTO exit_label;
END

-- Validate State, if exists
IF (@STATEPROVINCEID IS NOT NULL)
BEGIN
	IF NOT EXISTS(SELECT 1 FROM DBO.LOGISTICSADDRESSSTATE LSTATE WHERE LSTATE.STATEID = @STATEPROVINCEID AND LSTATE.COUNTRYREGIONID = @COUNTRYREGIONID)
	BEGIN
		SET @i_ReturnCode           = 2 ; -- invalid stateid
		GOTO exit_label;
	END	
END

-- Validate County, if exists
IF (@COUNTYID IS NOT NULL)
BEGIN
	IF NOT EXISTS(SELECT 1 FROM DBO.LOGISTICSADDRESSCOUNTY LCNTY WHERE LCNTY.COUNTYID = @COUNTYID 
						AND LCNTY.COUNTRYREGIONID = @COUNTRYREGIONID
						AND ( @STATEPROVINCEID IS NULL OR LCNTY.STATEID = @STATEPROVINCEID ))
	BEGIN
		SET @i_ReturnCode           = 3 ; -- invalid countyid
		GOTO exit_label;
	END	
END

-- Validate City, if exists
IF (@CITY IS NOT NULL)
BEGIN
	IF NOT EXISTS(SELECT 1 FROM DBO.LOGISTICSADDRESSSCITY LCITY 
						INNER JOIN DBO.LOGISTICSADDRESSCOUNTRYREGION LCNTRY ON LCNTRY.COUNTRYREGIONID = LCITY.COUNTRYREGIONID
								WHERE LCITY.NAME = @CITY 
										AND LCITY.COUNTRYREGIONID = LCNTRY.COUNTRYREGIONID
										AND ( @STATEPROVINCEID IS NULL OR LCITY.STATEID = @STATEPROVINCEID)
										AND ( @COUNTYID IS NULL OR LCITY.COUNTYID = @COUNTYID))
	BEGIN
		SET @i_ReturnCode           = 4 ; -- invalid city
		GOTO exit_label;
	END
END

-- Validate District, if exists
IF (@DISTRICT IS NOT NULL)
BEGIN
	IF NOT EXISTS(SELECT 1 FROM DBO.LOGISTICSADDRESSDISTRICT LDIST
						LEFT OUTER JOIN DBO.LOGISTICSADDRESSSCITY LCITY ON LCITY.RECID = LDIST.CITY
								WHERE LDIST.NAME = @DISTRICT
										AND ( @CITY IS NULL OR LCITY.NAME = @CITY )
										AND ( @COUNTYID IS NULL OR LCITY.COUNTYID = @COUNTYID)
										AND ( @STATEPROVINCEID IS NULL OR LCITY.STATEID = @STATEPROVINCEID)
										AND ( LCITY.COUNTRYREGIONID  = @COUNTRYREGIONID ))
	BEGIN
		SET @i_ReturnCode           = 5 ; -- invalid district 
		GOTO exit_label;
	END
END


-- Validate ZipCode, if exists
IF (@ZIPPOSTALCODE IS NOT NULL)
BEGIN
	IF NOT EXISTS(SELECT 1 FROM DBO.LOGISTICSADDRESSZIPCODE LZIP
						WHERE LZIP.ZIPCODE = @ZIPPOSTALCODE
							AND LZIP.COUNTRYREGIONID = @COUNTRYREGIONID							
							AND ( @STATEPROVINCEID IS NULL OR LZIP.STATE = @STATEPROVINCEID)
							AND ( @COUNTYID IS NULL OR LZIP.COUNTY = @COUNTYID)							
							AND ( @CITY IS NULL OR LZIP.CITY  = @CITY)
							AND ( @DISTRICT IS NULL OR LZIP.DISTRICTNAME = @DISTRICT))							
	BEGIN
		SET @i_ReturnCode           = 6 ; -- invalid zipcode
		GOTO exit_label;
	END
END

SET @i_ReturnCode = 0;

exit_label:

    RETURN @i_ReturnCode;
END
GO

IF OBJECT_ID(N'dbo.GetCountryRegions', N'P') IS NULL
BEGIN
    EXEC ('CREATE PROCEDURE GetCountryRegions AS (SELECT 1)');
    IF (@@ERROR = 0)
    BEGIN
        PRINT 'Successfully created stored procedure : GetCountryRegions';
    END;
    ELSE
    BEGIN 
        PRINT 'Failed to create stored procedure: GetCountryRegions';
    END;
END;
ELSE
BEGIN
    PRINT 'Skipped creating stored procedure: GetCountryRegions';
END
GO

ALTER PROCEDURE [dbo].[GetCountryRegions]
	@LANGUAGEID NVARCHAR(10) 
AS
BEGIN

SET NOCOUNT ON

SELECT LCNTRY.COUNTRYREGIONID, LCNTRY.ISOCODE, LCNTRY.TIMEZONE, LTRANS.SHORTNAME, LTRANS.LONGNAME, LTRANS.LANGUAGEID 
	 FROM DBO.LOGISTICSADDRESSCOUNTRYREGION LCNTRY 
	 INNER JOIN DBO.LOGISTICSADDRESSCOUNTRYREGIONTRANSLATION LTRANS ON LTRANS.COUNTRYREGIONID = LCNTRY.COUNTRYREGIONID
				WHERE (LTRANS.LANGUAGEID = @LANGUAGEID OR @LANGUAGEID IS NULL)

	
END
GO

IF OBJECT_ID(N'dbo.GETSUPPORTEDLANGUAGEIDS', N'V') IS NULL
BEGIN
    EXEC ('CREATE VIEW GETSUPPORTEDLANGUAGEIDS AS (SELECT 1 AS SAMPLE)');
    IF (@@ERROR = 0)
    BEGIN
        PRINT 'Successfully created empty view: GETSUPPORTEDLANGUAGEIDS.';
    END;
    ELSE
    BEGIN 
        PRINT 'FAILED to create view: GETSUPPORTEDLANGUAGEIDS.';
    END;
END;
GO

ALTER VIEW GETSUPPORTEDLANGUAGEIDS 
AS 
(
	SELECT [LANGUAGEID], [RECID] FROM [dbo].[LANGUAGETABLE]
)
GO

IF OBJECT_ID(N'dbo.GetStateProvinces', N'P') IS NULL
BEGIN
    EXEC ('CREATE PROCEDURE GetStateProvinces AS (SELECT 1)');
    IF (@@ERROR = 0)
    BEGIN
        PRINT 'Successfully created stored procedure : GetStateProvinces';
    END;
    ELSE
    BEGIN 
        PRINT 'Failed to create stored procedure: GetStateProvinces';
    END;
END;
ELSE
BEGIN
    PRINT 'Skipped creating stored procedure: GetStateProvinces';
END
GO

ALTER PROCEDURE [dbo].[GetStateProvinces]
	@CountryRegionId NVARCHAR(10)
AS
BEGIN

SET NOCOUNT ON

SELECT LCNTRY.COUNTRYREGIONID, LSTATE.STATEID, LSTATE.NAME AS STATENAME, LSTATE.INTRASTATCODE
	 FROM DBO.LOGISTICSADDRESSSTATE LSTATE 
	 INNER JOIN DBO.LOGISTICSADDRESSCOUNTRYREGION LCNTRY ON LSTATE.COUNTRYREGIONID = LCNTRY.COUNTRYREGIONID
				WHERE LSTATE.COUNTRYREGIONID = @CountryRegionId
	
END
GO

/*
* Create RETAILDLVMODEPRODUCTEXPLODED
*/
CREATE TABLE [dbo].[RETAILDLVMODEPRODUCTEXPLODED](
	[DLVMODE] [bigint] NOT NULL,
	[INVENTDIM] [nvarchar](20) NOT NULL,
	[ITEMID] [nvarchar](20) NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_100764RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[RETAILDLVMODEPRODUCTEXPLODED]  WITH CHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[RETAILDLVMODEPRODUCTEXPLODED] ADD  DEFAULT ((0)) FOR [DLVMODE]
GO

ALTER TABLE [dbo].[RETAILDLVMODEPRODUCTEXPLODED] ADD  DEFAULT ('') FOR [INVENTDIM]
GO

ALTER TABLE [dbo].[RETAILDLVMODEPRODUCTEXPLODED] ADD  DEFAULT ('') FOR [ITEMID]
GO


/*
* Create RETAILDLVMODECHANNELEXPLODED
*/
CREATE TABLE [dbo].[RETAILDLVMODECHANNELEXPLODED](
	[DLVMODE] [bigint] NOT NULL,
	[OMOPERATINGUNIT] [bigint] NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_100762RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[RETAILDLVMODECHANNELEXPLODED]  WITH CHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[RETAILDLVMODECHANNELEXPLODED] ADD  DEFAULT ((0)) FOR [DLVMODE]
GO

ALTER TABLE [dbo].[RETAILDLVMODECHANNELEXPLODED] ADD  DEFAULT ((0)) FOR [OMOPERATINGUNIT]
GO

/*
* Create RETAILDLVMODEADDRESSEXPLODED
*/
CREATE TABLE [dbo].[RETAILDLVMODEADDRESSEXPLODED](
	[COUNTRYREGION] [nvarchar](10) NOT NULL,
	[DLVMODE] [bigint] NOT NULL,
	[STATE] [nvarchar](10) NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_101301RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[RETAILDLVMODEADDRESSEXPLODED]  WITH CHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[RETAILDLVMODEADDRESSEXPLODED] ADD  DEFAULT ('') FOR [COUNTRYREGION]
GO

ALTER TABLE [dbo].[RETAILDLVMODEADDRESSEXPLODED] ADD  DEFAULT ((0)) FOR [DLVMODE]
GO

ALTER TABLE [dbo].[RETAILDLVMODEADDRESSEXPLODED] ADD  DEFAULT ('') FOR [STATE]
GO

DROPDEFAULTCONSTRAINT [RETAILPERIODICDISCOUNT], [PRIORITY]
GO

ALTER TABLE RETAILPERIODICDISCOUNT DROP COLUMN [PRIORITY]
GO

DROPDEFAULTCONSTRAINT [RETAILPERIODICDISCOUNTLINE], [CURRENCYCODE]
GO

ALTER TABLE RETAILPERIODICDISCOUNTLINE DROP COLUMN [CURRENCYCODE]
GO

DROPDEFAULTCONSTRAINT [RETAILDISCOUNTMIXANDMATCH], [DIFFERENTSAMEMANDMLINES]
GO

ALTER TABLE RETAILDISCOUNTMIXANDMATCH DROP COLUMN [DIFFERENTSAMEMANDMLINES]
GO

DROPDEFAULTCONSTRAINT [RETAILDISCOUNTLINEMIXANDMATCH], [BLOCKED]
GO

DROPDEFAULTCONSTRAINT [RETAILDISCOUNTLINEMIXANDMATCH], [MANDATORY]
GO

ALTER TABLE RETAILDISCOUNTLINEMIXANDMATCH DROP 
	COLUMN [BLOCKED],
	COLUMN [MANDATORY]
GO

DROPDEFAULTCONSTRAINT [RETAILDISCOUNTLINEOFFER], [DISCAMOUNTINCLTAX]
GO
DROPDEFAULTCONSTRAINT [RETAILDISCOUNTLINEOFFER], [DISCOUNTVALUE]
GO
DROPDEFAULTCONSTRAINT [RETAILDISCOUNTLINEOFFER], [QTYONHAND]
GO

ALTER TABLE RETAILDISCOUNTLINEOFFER DROP 
	COLUMN [DISCAMOUNTINCLTAX],
	COLUMN [DISCOUNTVALUE],
	COLUMN [QTYONHAND]
GO

DROP TABLE RETAILMIXANDMATCHTABLE
GO

DROP TABLE RETAILMIXANDMATCHLINE
GO

DROP TABLE RETAILMULTIBUYDISCOUNTTABLE
GO 

DROP TABLE RETAILMULTIBUYDISCOUNTLINE
GO

DROP TABLE RETAILMULTIBUYDISCOUNTITEMS
GO

DROP TABLE RETAILDISCOUNTOFFERTABLE
GO

DROP TABLE RETAILDISCOUNTOFFERLINE
GO

DROP TABLE INVENTLOCATION
GO

DROP VIEW [dbo].[RETAILPERIODICDISCOUNTSFLATTENED]
GO

CREATE VIEW [dbo].[RETAILPERIODICDISCOUNTSFLATTENED]
AS	
SELECT pd.[OFFERID], pd.[NAME], pd.[PERIODICDISCOUNTTYPE], pd.[PRICEDISCGROUP], 
		pd.[VALIDATIONPERIODID], pd.[DATEVALIDATIONTYPE], pd.[VALIDFROM], pd.[VALIDTO], 
		pd.[CONCURRENCYMODE], pd.[CURRENCYCODE], pd.[STATUS], pd.[ISDISCOUNTCODEREQUIRED],
		ISNULL(pdmm.MIXANDMATCHDISCOUNTTYPE, ISNULL(pdmb.MULTIBUYDISCOUNTTYPE, pd.PERIODICDISCOUNTTYPE)) as DISCOUNTTYPE, 
		0 as NOOFLINESTOTRIGGER, 
		pd.[DISCOUNTPERCENTVALUE],
		ISNULL(pdmm.[DEALPRICEVALUE],0.0) as DEALPRICEVALUE,
		ISNULL(pdmm.[DISCOUNTAMOUNTVALUE],0.0) as DISCOUNTAMOUNTVALUE, 
		ISNULL(pdmm.[NOOFLEASTEXPENSIVELINES],0) as NOOFLEASTEXPENSIVELINES, 
		ISNULL(pdmm.[NUMBEROFTIMESAPPLICABLE],0) as NUMBEROFTIMESAPPLICABLE,
		pdl.[RETAILGROUPMEMBERLINE], 
		pdl.[RECID] as DISCOUNTLINEID,
		pdl.[LINENUM], 
		pdl.[DISCOUNTPERCENTORVALUE], 
		pdl.[UNITOFMEASURE], 
		pd.[DATAAREAID]
FROM [dbo].[RETAILPERIODICDISCOUNT] as pd
JOIN [dbo].[RETAILPERIODICDISCOUNTLINE] as pdl ON pd.OFFERID = pdl.OFFERID AND pd.DATAAREAID = pdl.DATAAREAID
LEFT OUTER JOIN [dbo].[RETAILDISCOUNTMIXANDMATCH] as pdmm ON pd.RECID = pdmm.RECID
LEFT OUTER JOIN [dbo].[RETAILDISCOUNTMULTIBUY] as pdmb ON pd.RECID = pdmb.RECID
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOSTORET__INCOM__0B80A42E]') AND type = 'D')
BEGIN
	ALTER TABLE [RETAILSTORETABLE] DROP CONSTRAINT [DF__RBOSTORET__INCOM__0B80A42E]
END
GO

ALTER TABLE RETAILSTORETABLE DROP 
	COLUMN [INCOMEEXEPENSEACCOUNT],
	COLUMN [INCOMEEXPENSEACCOUNTDATAAREAID],
	COLUMN [INCOMEEXPENSEACCOUNTSTOREID]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOSTORET__CURRE__26349A6A]') AND type = 'D')
BEGIN
	ALTER TABLE [RETAILSTORETENDERTYPECARDTABLE] DROP CONSTRAINT [DF__RBOSTORET__CURRE__26349A6A]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOSTORET__CURRE__25407631]') AND type = 'D')
BEGIN
	ALTER TABLE [RETAILSTORETENDERTYPECARDTABLE] DROP CONSTRAINT [DF__RBOSTORET__CURRE__25407631]
END
GO

ALTER TABLE RETAILSTORETENDERTYPECARDTABLE DROP 
	COLUMN [CURRENCYCODE],
	COLUMN [CURRENCYONTOTALSCODE]
GO

IF OBJECT_ID(N'dbo.GetCounties', N'P') IS NULL
BEGIN
    EXEC ('CREATE PROCEDURE GetCounties AS (SELECT 1)');
    IF (@@ERROR = 0)
    BEGIN
        PRINT 'Successfully created stored procedure : GetCounties';
    END;
    ELSE
    BEGIN 
        PRINT 'Failed to create stored procedure: GetCounties';
    END;
END;
ELSE
BEGIN
    PRINT 'Skipped creating stored procedure: GetCounties';
END
GO

ALTER PROCEDURE [dbo].[GetCounties]
	@CountryRegionId NVARCHAR(10),
	@StateProvinceID NVARCHAR(10) = NULL
AS
BEGIN

SET NOCOUNT ON

SELECT LCNTY.COUNTYID, LCNTY.NAME, LCNTY.COUNTYCODE_SP, LCNTY.COUNTRYREGIONID, LCNTY.STATEID
	 FROM DBO.LOGISTICSADDRESSCOUNTY LCNTY 
	  WHERE LCNTY.COUNTRYREGIONID = @CountryRegionId
				AND (@STATEPROVINCEID IS NULL OR LCNTY.STATEID = @STATEPROVINCEID)
	
END
GO

IF OBJECT_ID(N'dbo.GetCities', N'P') IS NULL
BEGIN
    EXEC ('CREATE PROCEDURE GetCities AS (SELECT 1)');
    IF (@@ERROR = 0)
    BEGIN
        PRINT 'Successfully created stored procedure : GetCities';
    END;
    ELSE
    BEGIN 
        PRINT 'Failed to create stored procedure: GetCities';
    END;
END;
ELSE
BEGIN
    PRINT 'Skipped creating stored procedure: GetCities';
END
GO

ALTER PROCEDURE [dbo].[GetCities]
	@CountryRegionId NVARCHAR(10),
	@StateProvinceID NVARCHAR(10) = NULL,
	@CountyId        NVARCHAR(10) = NULL
AS
BEGIN

SET NOCOUNT ON

SELECT LCITY.NAME AS CITYNAME, LCITY.DESCRIPTION, LCITY.COUNTYID, LCITY.COUNTRYREGIONID, LCITY.STATEID
	 FROM DBO.LOGISTICSADDRESSSCITY LCITY 
	  WHERE LCITY.COUNTRYREGIONID = @CountryRegionId
				AND (@StateProvinceID IS NULL OR LCITY.STATEID = @StateProvinceID)
				AND (@CountyId IS NULL OR LCITY.COUNTYID = @CountyId)
	
END
GO

IF OBJECT_ID(N'dbo.GetDistricts', N'P') IS NULL
BEGIN
    EXEC ('CREATE PROCEDURE GetDistricts AS (SELECT 1)');
    IF (@@ERROR = 0)
    BEGIN
        PRINT 'Successfully created stored procedure : GetDistricts';
    END;
    ELSE
    BEGIN 
        PRINT 'Failed to create stored procedure: GetDistricts';
    END;
END;
ELSE
BEGIN
    PRINT 'Skipped creating stored procedure: GetDistricts';
END
GO

ALTER PROCEDURE [dbo].[GetDistricts]
	@CountryRegionId NVARCHAR(10),
	@StateProvinceID NVARCHAR(10) = NULL,
	@CountyId        NVARCHAR(10) = NULL,
	@City            NVARCHAR(60) = NULL
AS
BEGIN

SET NOCOUNT ON

SELECT LDIST.NAME AS DISTRICTNAME, LDIST.DESCRIPTION, LCITY.NAME AS CITYNAME, LCITY.COUNTYID, LCITY.STATEID, LCITY.COUNTRYREGIONID 
	FROM dbo.LOGISTICSADDRESSDISTRICT LDIST INNER JOIN dbo.LOGISTICSADDRESSSCITY LCITY ON LDIST.CITY = LCITY.RECID
		WHERE LCITY.COUNTRYREGIONID = @CountryRegionId
			    AND (@StateProvinceID IS NULL OR LCITY.STATEID = @StateProvinceID)
			    AND (@CountyId IS NULL OR LCITY.COUNTYID = @CountyId)
			    AND (@City IS NULL OR LCITY.NAME = @City)

END
GO

IF OBJECT_ID(N'dbo.GetZipCodes', N'P') IS NULL
BEGIN
    EXEC ('CREATE PROCEDURE GetZipCodes AS (SELECT 1)');
    IF (@@ERROR = 0)
    BEGIN
        PRINT 'Successfully created stored procedure : GetZipCodes';
    END;
    ELSE
    BEGIN 
        PRINT 'Failed to create stored procedure: GetZipCodes';
    END;
END;
ELSE
BEGIN
    PRINT 'Skipped creating stored procedure: GetZipCodes';
END
GO

ALTER PROCEDURE [dbo].[GetZipCodes]
	@CountryRegionId NVARCHAR(10),
	@StateProvinceID NVARCHAR(10) = NULL,
	@CountyId        NVARCHAR(10) = NULL,
	@City		     NVARCHAR(60) = NULL,
	@District        NVARCHAR(60) = NULL
AS
BEGIN

SET NOCOUNT ON

SELECT LZIP.ZIPCODE, LZIP.STREETNAME, LZIP.TIMEZONE, LZIP.CITY AS CITYNAME, LZIP.CITYALIAS, LZIP.COUNTY AS COUNTYID, LZIP.DISTRICTNAME, LZIP.STATE AS STATEID, LZIP.COUNTRYREGIONID
	FROM DBO.LOGISTICSADDRESSZIPCODE LZIP
		WHERE LZIP.COUNTRYREGIONID = @CountryRegionId
			    AND (@StateProvinceID IS NULL OR LZIP.STATE = @StateProvinceID)
			    AND (@CountyId IS NULL OR LZIP.COUNTY = @CountyId)
			    AND (@City IS NULL OR LZIP.CITY = @City)
			    AND (@District IS NULL OR LZIP.DISTRICTNAME = @District)

END
GO

IF OBJECT_ID(N'dbo.GetFromZipCode', N'P') IS NULL
BEGIN
    EXEC ('CREATE PROCEDURE GetFromZipCode AS (SELECT 1)');
    IF (@@ERROR = 0)
    BEGIN
        PRINT 'Successfully created stored procedure : GetFromZipCode';
    END;
    ELSE
    BEGIN 
        PRINT 'Failed to create stored procedure: GetFromZipCode';
    END;
END;
ELSE
BEGIN
    PRINT 'Skipped creating stored procedure: GetFromZipCode';
END
GO

ALTER PROCEDURE [dbo].[GetFromZipCode]
	@CountryRegionId NVARCHAR(10),
	@ZipCode NVARCHAR(10)
AS
BEGIN

SET NOCOUNT ON

SELECT LZIP.ZIPCODE, LZIP.STREETNAME, LZIP.TIMEZONE, LZIP.CITY AS CITYNAME, LZIP.CITYALIAS, LZIP.COUNTY AS COUNTYID, LZIP.DISTRICTNAME, LZIP.STATE AS STATEID, LZIP.COUNTRYREGIONID
	FROM DBO.LOGISTICSADDRESSZIPCODE LZIP
		WHERE LZIP.COUNTRYREGIONID = @CountryRegionId
				AND LZIP.ZIPCODE = @ZipCode

END
GO

ALTER TABLE ECORESPRODUCTMASTERDIMENSIONVALUE
ADD 	
	[RETAILDISPLAYORDER] [numeric](32, 16) NOT NULL DEFAULT (0)
GO


/*

	BRAZILIAN TABLES

*/

DROP TABLE RBOZREPORTDATA_BR
GO

DROP TABLE RBOECFMASTERDATA_BR
GO

DROP TABLE RBOCUPOMFISCALLINES_BR
GO

CREATE TABLE [dbo].[RETAILCARDPAYMENT_BR](
	[CARDTYPE] [nvarchar](3) NOT NULL,
	[TRANSACTIONDATE] [datetime] NOT NULL,
	[CREDITCARDCOMPANYNAME] [nvarchar](30) NULL,
	[OPERATIONTYPE] [nvarchar](2) NULL,
	[INSTALLMENTS] [int] NULL,
	[RECEIPTNUMBER] [nvarchar](12) NOT NULL,
	[AMOUNT] [numeric](28, 12) NOT NULL,
	[LINENUMBER] [numeric](28, 12) NULL,
	[PAYMENTSTATUS] [int] NOT NULL,
	[RECEIPTSTATUS] [int] NOT NULL,
	[PRINTTARGET] [int] NOT NULL,
	[RESPONSEFILE] [nvarchar](max) NULL,
	[CONTROLNUMBER] [nvarchar](6) NOT NULL,
	[TRANSACTIONID] [nvarchar](10) NOT NULL,
	[TERMINALID] [nvarchar](10) NOT NULL,
	[STOREID] [nvarchar](10) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
CONSTRAINT [PK_RETAILCARDPAYMENT_BR] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[STOREID] ASC,
	[TERMINALID] ASC,
	[TRANSACTIONID] ASC,
	[CONTROLNUMBER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[PLFISCALTAXTABLE](
                [FISCALPRINTERCODE] [nvarchar] (20) NOT NULL,
                [TAXCODE] [nvarchar](10) NOT NULL,
                [FISCALTAXCODE] [int] NOT NULL,
                [DATAAREAID] [nvarchar](4) NOT NULL,				
				[RECID] [bigint] NOT NULL,
	CONSTRAINT [PK_FISCALTAXIDX] PRIMARY KEY CLUSTERED 
	(
		[DATAAREAID] ASC,
		[TAXCODE] ASC,
		[FISCALPRINTERCODE] ASC,
		[FISCALTAXCODE] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** adding/removing columns to CUSTTABLE for Brazil ******/
ALTER TABLE [dbo].[CUSTTABLE]
ADD
	[IENUM_BR] [nvarchar](20) NOT NULL DEFAULT(''),
	[SUFRAMANUMBER_BR] [nvarchar](10) NOT NULL DEFAULT(''),
	[SUFRAMA_BR] [int] NOT NULL DEFAULT ((0)),
	[CNPJCPFNUM_BR] [nvarchar](20) NOT NULL DEFAULT('')	
GO

DROPDEFAULTCONSTRAINT [CUSTTABLE], [CNPJCPFNUM]
GO

ALTER TABLE [dbo].[CUSTTABLE]
DROP
	COLUMN [ADDRESSNUMBER],
	COLUMN [ADDRESSCOMPLEMENT],
	COLUMN [DISTRICTNAME],
	COLUMN [CNPJCPFNUM]
GO	

/****** adding/removing columns to TAXTABLE for Brazil ******/
ALTER TABLE [dbo].[TAXTABLE]
ADD
	[RETAINEDTAX_BR] [int] NOT NULL DEFAULT ((0)),
	[INCLUDEDTAX_BR] [int] NOT NULL DEFAULT ((0)),
	[TAXSUBSTITUTION_BR] [int] NOT NULL DEFAULT ((0)),
	[TAXTYPE_BR] [int] NOT NULL DEFAULT ((0)),
	[STATEID_BR] [nvarchar](10) NOT NULL DEFAULT(''),
	[ISICMSDIFFERENCETAX_BR] [int] NOT NULL DEFAULT ((0)),
	[REVENUECODE_BR] [nvarchar](4) NOT NULL DEFAULT(''),
	[TAXATIONCODETABLE_BR] [bigint] NOT NULL DEFAULT ((0))
GO

DROPDEFAULTCONSTRAINT 'TAXTABLE', 'TAXTYPE'
GO

ALTER TABLE [dbo].[TAXTABLE]
DROP
	COLUMN [TAXTYPE]
GO

/****** adding new columns to TAXDATA for Brazil ******/
ALTER TABLE [dbo].[TAXDATA]
ADD
	[TAXREDUCTIONPCT_BR] [numeric](32, 16) NOT NULL DEFAULT ((0))
GO

/****** adding/removing columns to TAXONITEM for Brazil ******/
ALTER TABLE [dbo].[TAXONITEM]
ADD 	
	[TAXATIONCODETABLE_BR] [bigint] NOT NULL DEFAULT((0)),
	[WITHOUTTAXCREDIT_BR] [int] NOT NULL DEFAULT((0)),
	[EXEMPTTAX_BR] [int] NOT NULL DEFAULT((0))
GO

/****** adding/removing columns to TAXGROUPDATA for Brazil ******/
ALTER TABLE [dbo].[TAXGROUPDATA]
ADD 	
	[TAXATIONCODETABLE_BR] [bigint] NULL DEFAULT ((0))
GO

DROPDEFAULTCONSTRAINT [TAXGROUPDATA], [SPEDTAXCODE]
GO

ALTER TABLE [dbo].[TAXGROUPDATA]
DROP
	COLUMN [SPEDTAXCODE]
GO

/****** adding/removing columns to TAXGROUPHEADING for Brazil ******/
DROPDEFAULTCONSTRAINT [TAXGROUPHEADING], [SPEDTAXCODE]
GO

ALTER TABLE [dbo].[TAXGROUPHEADING]
DROP
	COLUMN [SPEDTAXCODE]
GO

/****** adding new table RETAILINVENTORY_BR for Brazil ******/
CREATE TABLE [dbo].[RETAILINVENTORY_BR](
	[ITEMID] [nvarchar](20) NOT NULL DEFAULT(''),
	[ITEMNAME] [nvarchar](60) NOT NULL DEFAULT(''),
	[UNITID] [nvarchar](10) NOT NULL DEFAULT(''),
	[INVENTSIGNAL] [nvarchar](1) NOT NULL DEFAULT(''),
	[QTY] [numeric](28,12) NOT NULL DEFAULT((0)),
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT(''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT(''),
	[DATAAREAID] [nvarchar](4) NOT NULL  DEFAULT('')
	CONSTRAINT [PK_RETAILINVENTORY_BR] PRIMARY KEY CLUSTERED 
	(
		[DATAAREAID] ASC,
		[STOREID] ASC,
		[TERMINALID] ASC,
		[ITEMID] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO


/****** adding new table RETAILINVENTORYHEADER_BR for Brazil ******/
CREATE TABLE [dbo].[RETAILINVENTORYHEADER_BR](
    [FIRSTDOCUMENTDATE] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT(''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT(''),
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT('')
	CONSTRAINT [PK_RETAILINVENTORYHEADER_BR] PRIMARY KEY CLUSTERED 
	(
		[DATAAREAID] ASC,
		[STOREID] ASC,
		[TERMINALID] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** adding new table RETAILMANUALCHANGESLOG_BR for Brazil ******/
CREATE TABLE [dbo].[RETAILMANUALCHANGESLOG_BR](
	[TABLENAME] [nvarchar](50) NOT NULL DEFAULT(''),
	[PRIMARYKEY] [nvarchar](200) NOT NULL DEFAULT(''),
	[APPLICATION] [nvarchar](128) NOT NULL DEFAULT('')
	CONSTRAINT [PK_RETAILMANUALCHANGESLOG] PRIMARY KEY CLUSTERED 
	(
		[TABLENAME] ASC,
		[PRIMARYKEY] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILEFDOCUMENT_BR](
                [CHV_NFE] [nvarchar](44) NOT NULL DEFAULT(''),
                [IND_OPER] [nvarchar](1) NOT NULL DEFAULT(''),
                [IND_EMIT] [nvarchar](1) NOT NULL DEFAULT(''),
                [COD_PART] [nvarchar](60) NOT NULL DEFAULT(''),
                [COD_MOD] [nvarchar](2) NOT NULL DEFAULT(''),
                [COD_SIT] [numeric](9) NOT NULL DEFAULT((0)),
                [SER] [nvarchar](3) NOT NULL DEFAULT(''),
                [NUM_DOC] [numeric](9) NOT NULL DEFAULT((0)),
                [DT_DOC] [date] NOT NULL DEFAULT ('1900-01-01'),
                [DT_E_S] [date] NOT NULL DEFAULT ('1900-01-01'),
                [VL_DOC] [numeric](28,2) NOT NULL DEFAULT((0)),
                [IND_PGTO] [nvarchar](1) NOT NULL DEFAULT(''),
                [VL_DESC] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_ABAT_NT] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_MERC] [numeric](28,2) NOT NULL DEFAULT((0)),
                [IND_FRT] [nvarchar](1) NOT NULL DEFAULT(''),
                [VL_FRT] [numeric](28,2) NOT NULL DEFAULT(''),
                [VL_SEG] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_OUT_DA] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_BC_ICMS] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_ICMS] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_BC_ICMS_ST] [numeric](28,2) NOT NULL DEFAULT((0)),
                [UF] [nvarchar](2) NOT NULL DEFAULT(''),
                [STOREID] [nvarchar](10) NOT NULL DEFAULT(''),
                [TERMINALID] [nvarchar](10) NOT NULL DEFAULT(''),
                [DATAAREAID] [nvarchar](4) NOT NULL DEFAULT(''),                
	CONSTRAINT [PK_RETAILEFDOCUMENT_BR] PRIMARY KEY CLUSTERED 
	(
		[DATAAREAID] ASC,
		[STOREID] ASC,
		[TERMINALID] ASC,
		[CHV_NFE] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILEFDOCUMENTLINES_BR](
                [CHV_NFE] [nvarchar](44) NOT NULL DEFAULT(''),
                [CFOP] [numeric](4) NOT NULL DEFAULT((0)),
                [CST_ICMS] [numeric](5) NOT NULL DEFAULT((0)),
                [NUM_ITEM] [numeric](3) NOT NULL DEFAULT((0)),
                [COD_ITEM] [nvarchar](60) NOT NULL DEFAULT((0)),
                [QTD] [numeric](28,5) NOT NULL DEFAULT((0)),
                [VL_ITEM] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_DESC] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_ICMS] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_BC_ICMS] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_BC_ICMS_ST] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_ICMS_ST] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_IPI] [numeric](28,2) NOT NULL DEFAULT((0)),
                [ALIQ_ICMS] [numeric](6,2) NOT NULL DEFAULT((0)),
                [VL_RED_BC] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_ISE_IPI] [numeric](28,2) NOT NULL DEFAULT((0)),
                [VL_OUT_IPI] [numeric](28,2) NOT NULL DEFAULT((0)),
                [STOREID] [nvarchar](10) NOT NULL DEFAULT(''),
                [TERMINALID] [nvarchar](10) NOT NULL DEFAULT(''),
                [DATAAREAID] [nvarchar](4) NOT NULL DEFAULT('') 
	CONSTRAINT [PK_RETAILEFDOCUMENTLINES_BR] PRIMARY KEY CLUSTERED 
	(
		[DATAAREAID] ASC,
		[STOREID] ASC,
		[TERMINALID] ASC,
		[CHV_NFE] ASC,
		[NUM_ITEM] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** adding new columns to [LOGISTICSADDRESSCOUNTRYREGION] for Brazil ******/
ALTER TABLE [dbo].[LOGISTICSADDRESSCOUNTRYREGION]
ADD
	[BACENCODE_BR] [nvarchar](4) NULL
GO

/****** adding new table [INVENTITEMGTIN] for Brazil ******/
CREATE TABLE [dbo].[INVENTITEMGTIN](
		[ITEMID] [nvarchar](20) NOT NULL DEFAULT(''),
		[INVENTDIMID] [nvarchar](20) NOT NULL DEFAULT(''),
		[DESCRIPTION] [nvarchar](60) NOT NULL DEFAULT(''),
		[GTIN] [numeric](28, 12) NOT NULL DEFAULT((0)),
		[GTINSETUP] [int] NOT NULL DEFAULT((0)),
		[UNITID] [nvarchar](10) NOT NULL DEFAULT(''),
		[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT(''),
		[RECID] [bigint] NOT NULL DEFAULT((0)),
	CONSTRAINT [PK_INVENTITEMGTIN] PRIMARY KEY CLUSTERED 
	(
		[ITEMID] ASC,
		[INVENTDIMID] ASC,
		[UNITID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[ACCOUNTANT_BR]    Script Date: 05/03/2012 17:13:07 ******/
CREATE TABLE [dbo].[ACCOUNTANT_BR](
	[CNPJNUM_BR] [nvarchar](20) NOT NULL DEFAULT(''),
	[CPFNUM_BR] [nvarchar](20) NOT NULL DEFAULT(''),
	[CRCNUM_BR] [nvarchar](20) NOT NULL DEFAULT(''),
	[NAME] [nvarchar](100) NOT NULL DEFAULT(''),
	[RECID] [bigint] NOT NULL DEFAULT((0)),
 CONSTRAINT [PK_ACCOUNTANT_BR] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[ACCOUNTANTLOGISTICSLOCATION_BR]    Script Date: 05/03/2012 17:22:22 ******/
CREATE TABLE [dbo].[ACCOUNTANTLOGISTICSLOCATION_BR](
	[ACCOUNTANT] [bigint] NOT NULL DEFAULT((0)),
	[ISDEFAULT] [int] NOT NULL DEFAULT((0)),
	[ISPOSTALADDRESS] [int] NOT NULL DEFAULT((0)),
	[ISPRIMARY] [int] NOT NULL DEFAULT((0)),
	[ISPRIVATE] [int] NOT NULL DEFAULT((0)),
	[LOCATION] [bigint] NOT NULL DEFAULT((0)),
	[RECID] [bigint] NOT NULL DEFAULT((0)),
 CONSTRAINT [PK_ACCOUNTANTLOGISTICSLOCATION_BR] PRIMARY KEY NONCLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[ACCOUNTANTLOGISTICSLOCATIONROLE_BR]    Script Date: 05/03/2012 17:25:13 ******/
CREATE TABLE [dbo].[ACCOUNTANTLOGISTICSLOCATIONROLE_BR](
	[ACCOUNTANTLOGISTICSLOCATION] [bigint] NOT NULL DEFAULT((0)),
	[LOCATIONROLE] [bigint] NOT NULL DEFAULT((0)),
	[RECID] [bigint] NOT NULL DEFAULT((0)),
 CONSTRAINT [PK_ACCOUNTANTLOGISTICSLOCATIONROLE_BR] PRIMARY KEY NONCLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** adding new table [TAXATIONCODESETUP_BR] for Brazil ******/
CREATE TABLE [dbo].[TAXATIONCODESETUP_BR](
	[TAXTYPE] [int] NOT NULL DEFAULT((0)),
	[MANDATORY] [int] NOT NULL DEFAULT((0)),
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT(''),
	[RECID] [bigint] NOT NULL DEFAULT((0)),
 CONSTRAINT [PK_TAXATIONCODESETUP_BR] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[TAXTYPE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** adding new table [TAXATIONCODETABLE_BR] for Brazil ******/
CREATE TABLE [dbo].[TAXATIONCODETABLE_BR](
	[TAXTYPE] [int] NOT NULL DEFAULT((0)),
	[DESCRIPTION] [nvarchar](60) NOT NULL DEFAULT(''),
	[TAXATIONCODE] [nvarchar](3) NOT NULL DEFAULT(''),
	[FISCALVALUE] [int] NOT NULL DEFAULT((0)),
	[INPUTCODE] [nvarchar](1) NOT NULL DEFAULT(''),
	[OUTPUTCODE] [nvarchar](1) NOT NULL DEFAULT(''),
	[ATOCOTEPETAXCODE] [nvarchar](3) NOT NULL DEFAULT(''),
	[FROMDATE] [datetime] NOT NULL DEFAULT('1900-01-01 00:00:00.000'),
	[TODATE] [datetime] NOT NULL DEFAULT('1900-01-01 00:00:00.000'),
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT(''),
	[RECID] [bigint] NOT NULL DEFAULT((0)),
 CONSTRAINT [PK_TAXATIONCODETABLE] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILFISCALRECEIPT_BR](
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT (''),
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
	[TRANSACTIONID] [nvarchar](44) NOT NULL DEFAULT (''),
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT (''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT (''),
	[QUANTITYDECIMALS] [int] NOT NULL DEFAULT (0),
	[UNITDECIMALS] [int] NOT NULL DEFAULT (0),
	[TOTALSURCHARGEAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TOTALDISCOUNTAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TOTALAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[ACCOUNTINGDATE] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[STATUS] [int] NOT NULL DEFAULT (0),
	[RECEIPTNUMBER] [int] NOT NULL DEFAULT (0),
	[CONSUMERNAME] [nvarchar](100) NOT NULL DEFAULT (''),
	[CONSUMERCNPJCPFNUMBER] [nvarchar](20) NOT NULL DEFAULT (''),
	[ZREPORTNUMBER] [int] NOT NULL DEFAULT (0),
	[ADDITIONALFISCALMEMORYINDEX] [int] NOT NULL DEFAULT (0),
	[FISCALPRINTERSERIALNUMBER] [nvarchar](20) NOT NULL DEFAULT (''),
	[FISCALRECEIPTNUMBER] [int] NOT NULL DEFAULT (0),
	[FISCALRECEIPTDATETIME] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[FISCALRECEIPTDATETIMETZID] [int] NOT NULL DEFAULT (0),
	[FISCALRECEIPTMODEL] [nvarchar](3) NOT NULL DEFAULT (''),
 CONSTRAINT [PK_RETAILFISCALRECEIPT_BR] PRIMARY KEY CLUSTERED 
(
	[TRANSACTIONID] ASC,
	[TERMINALID] ASC,
	[STOREID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILFISCALRECEIPTLINE_BR](
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
	[TRANSACTIONID] [nvarchar](44) NOT NULL DEFAULT (''),
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT (''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT (''),
	[UNIT] [nvarchar](10) NOT NULL DEFAULT (''),
	[QUANTITY] [numeric](32, 16) NOT NULL DEFAULT (0),
	[LINEDISCOUNTAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[CFOP] [nvarchar](5) NOT NULL DEFAULT (''),
	[LINESURCHARGEAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[UNITPRICE] [numeric](32, 16) NOT NULL DEFAULT (0),
	[LINEAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[ITEMID] [nvarchar](20) NOT NULL DEFAULT (''),
	[ITEMTYPE] [nvarchar](10) NOT NULL DEFAULT (''),
	[CANCELLEDQUANTITY] [numeric](32, 16) NOT NULL DEFAULT (0),
	[LINENUM] [numeric](32, 16) NOT NULL DEFAULT (0),
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT (''),
 CONSTRAINT [PK_RETAILFISCALRECEIPTLINE_BR] PRIMARY KEY CLUSTERED 
(
	[LINENUM] ASC,
	[TRANSACTIONID] ASC,
	[TERMINALID] ASC,
	[STOREID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILFISCALRECEIPTTAXTRANS_BR](
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT (''),
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
	[TRANSACTIONID] [nvarchar](44) NOT NULL DEFAULT (''),
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT (''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT (''),
	[TOTALIZERNAME] [nvarchar](10) NOT NULL DEFAULT (''),
	[TOTALIZERINDEX] [int] NOT NULL DEFAULT (0),
	[TAXVALUE] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TAXBASEAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TAXATIONCODE] [nvarchar](3) NOT NULL DEFAULT (''),
	[TAXAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[LINENUM] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TAXTYPE] [int] NOT NULL DEFAULT (0),
	[TAXCODE] [nvarchar](10) NOT NULL DEFAULT (''),
	[FISCALVALUE] [int] NOT NULL DEFAULT (0),
 CONSTRAINT [PK_RETAILFISCALRECEIPTTAXTRANS_BR] PRIMARY KEY CLUSTERED 
(
	[TAXTYPE] ASC,
	[LINENUM] ASC,
	[TRANSACTIONID] ASC,
	[TERMINALID] ASC,
	[STOREID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILTRANSACTIONPAYMENTTRANS_BR](
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT (''),
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
	[TRANSACTIONID] [nvarchar](44) NOT NULL DEFAULT (''),
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT (''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT (''),
	[AMOUNTCUR] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TENDERTYPE] [nvarchar](10) NOT NULL DEFAULT (''),
	[TRANSACTIONSTATUS] [int] NOT NULL DEFAULT (0),
	[TRANSDATE] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[TRANSTIME] [int] NOT NULL DEFAULT (0),
	[AMOUNTTENDERED] [numeric](32, 16) NOT NULL DEFAULT (0),
	[LINENUM] [numeric](32, 16) NOT NULL DEFAULT (0),
 CONSTRAINT [PK_RETAILTRANSACTIONPAYMENTTRANS_BR] PRIMARY KEY CLUSTERED 
(
	[LINENUM] ASC,
	[TRANSACTIONID] ASC,
	[TERMINALID] ASC,
	[STOREID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILFISCALDOCUMENTMODEL2_BR](
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT (''),
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
	[TRANSACTIONID] [nvarchar](44) NOT NULL DEFAULT (''),
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT (''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT (''),
	[STATUS] [int] NOT NULL DEFAULT (0),
	[TOTALSURCHARGEAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TOTALDISCOUNTAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TOTALAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[CONSUMERCNPJCPFNUMBER] [nvarchar](20) NOT NULL DEFAULT (''),
	[FISCALDOCUMENTSERIES] [nvarchar](3) NOT NULL DEFAULT (''),
	[FISCALDOCUMENTNUMBER] [nvarchar](20) NOT NULL DEFAULT (''),
	[FISCALDOCUMENTDATE] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[FISCALDOCUMENTACCOUNTNUM] [nvarchar](20) NOT NULL DEFAULT (''),
 CONSTRAINT [PK_RETAILFISCALDOCUMENTMODEL2_BR] PRIMARY KEY CLUSTERED 
(
	[FISCALDOCUMENTNUMBER] ASC,
	[FISCALDOCUMENTSERIES] ASC,
	[FISCALDOCUMENTDATE] ASC,
	[TERMINALID] ASC,
	[STOREID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILFISCALDOCUMENTMODEL2LINE_BR](
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT (''),
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
	[TRANSACTIONID] [nvarchar](44) NOT NULL DEFAULT (''),
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT (''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT (''),
	[UNITPRICE] [numeric](32, 16) NOT NULL DEFAULT (0),
	[UNIT] [nvarchar](10) NOT NULL DEFAULT (''),
	[QUANTITY] [numeric](32, 16) NOT NULL DEFAULT (0),
	[LINESURCHARGE] [numeric](32, 16) NOT NULL DEFAULT (0),
	[LINEDISCOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[LINEAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[CFOP] [nvarchar](5) NOT NULL DEFAULT (''),
	[ITEMID] [nvarchar](20) NOT NULL DEFAULT (''),
	[LINENUM] [numeric](32, 16) NOT NULL DEFAULT (0),
 CONSTRAINT [PK_RETAILFISCALDOCUMENTMODEL2LINE_BR] PRIMARY KEY CLUSTERED 
(
	[LINENUM] ASC,
	[TRANSACTIONID] ASC,
	[TERMINALID] ASC,
	[STOREID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILFISCALDOCUMENTMODEL2TAXTRANS_BR](
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT (''),
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
	[TRANSACTIONID] [nvarchar](44) NOT NULL DEFAULT (''),
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT (''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT (''),
	[TAXAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TAXATIONCODE] [nvarchar](3) NOT NULL DEFAULT (''),
	[TAXBASEAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TAXVALUE] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TAXTYPE] [int] NOT NULL DEFAULT (0),
	[TAXATIONORIGIN] [int] NOT NULL DEFAULT (0),
	[TAXREDUCTIONPCT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[LINENUM] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TAXCODE] [nvarchar](10) NOT NULL DEFAULT (''),
	[FISCALVALUE] [int] NOT NULL DEFAULT (0),
 CONSTRAINT [PK_RETAILFISCALDOCUMENTMODEL2TAXTRANS_BR] PRIMARY KEY CLUSTERED 
(
	[TAXTYPE] ASC,
	[LINENUM] ASC,
	[TRANSACTIONID] ASC,
	[TERMINALID] ASC,
	[STOREID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILFISCALPRINTER_BR](
	[TYPE] [nvarchar](10) NOT NULL DEFAULT (''),
	[TERMINALNUMBER] [int] NOT NULL DEFAULT (0),
	[SOFTWAREVERSION] [nvarchar](10) NOT NULL DEFAULT (''),
	[SOFTWAREDATE] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[NATIONALCODE] [nvarchar](6) NOT NULL DEFAULT (''),
	[MODELNUMBER] [nvarchar](30) NOT NULL DEFAULT (''),
	[FISCALRECEIPTMODEL] [nvarchar](3) NOT NULL DEFAULT (''),
	[MANUFACTURER] [nvarchar](20) NOT NULL DEFAULT (''),
	[ADDITIONALFISCALMEMORYINDEX] [int] NOT NULL DEFAULT (0),
	[RESTARTOPERATIONNUMBER] [int] NOT NULL DEFAULT (0),
	[SERIALNUMBER] [nvarchar](20) NOT NULL DEFAULT (''),
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT (''),
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT (''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT (''),
 CONSTRAINT [PK_RETAILFISCALPRINTER_BR] PRIMARY KEY CLUSTERED 
(
	[RESTARTOPERATIONNUMBER] ASC,
	[ADDITIONALFISCALMEMORYINDEX] ASC,
	[SERIALNUMBER] ASC,
	[TERMINALID] ASC,
	[STOREID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILFISCALPRINTERREPORT_BR](
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT (''),
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT (''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT (''),
	[TRANSACTIONID] [nvarchar](44) NOT NULL DEFAULT (''),
	[NONFISCALOPERATIONNUMBER] [int] NOT NULL DEFAULT (0),
	[MANAGEMENTREPORTNUMBER] [int] NOT NULL DEFAULT (0),
	[CREDITDEBITRECEIPTNUMBER] [int] NOT NULL DEFAULT (0),
	[ADDITIONALFISCALMEMORYINDEX] [int] NOT NULL DEFAULT (0),
	[RECEIPTNUMBER] [int] NOT NULL DEFAULT (0),
	[RESTARTOPERATIONNUMBER] [int] NOT NULL DEFAULT (0),
	[FISCALPRINTERSERIALNUMBER] [nvarchar](20) NOT NULL DEFAULT (''),
	[TRANSACTIONDATETIME] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[REPORTDATETIME] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[REPORTTYPE] [nvarchar](2) NOT NULL DEFAULT (''),
 CONSTRAINT [PK_RETAILFISCALPRINTERREPORT_BR] PRIMARY KEY CLUSTERED 
(
	[RESTARTOPERATIONNUMBER] ASC,
	[RECEIPTNUMBER] ASC,
	[ADDITIONALFISCALMEMORYINDEX] ASC,
	[FISCALPRINTERSERIALNUMBER] ASC,
	[TERMINALID] ASC,
	[STOREID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILZREPORT_BR](
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT (''),
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT (''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT (''),
	[PISAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[COFINSAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[TERMINALNUMBER] [int] NOT NULL DEFAULT (0),
	[FISCALRECEIPTMODEL] [nvarchar](3) NOT NULL DEFAULT (''),
	[RESTARTOPERATIONNUMBER] [int] NOT NULL DEFAULT (0),
	[LASTRECEIPTNUMBER] [int] NOT NULL DEFAULT (0),
	[FIRSTRECEIPTNUMBER] [int] NOT NULL DEFAULT (0),
	[ISSDISCOUNT] [int] NOT NULL DEFAULT (0),
	[ZREPORTDATETIME] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
	[ZREPORTDATETIMETZID] [int] NOT NULL DEFAULT (0),
	[NETAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[GROSSDAILYSALE] [numeric](32, 16) NOT NULL DEFAULT (0),
	[FINALGRANDTOTALAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[INITIALGRANDTOTALAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
	[ZREPORTNUMBER] [int] NOT NULL DEFAULT (0),
	[ADDITIONALFISCALMEMORYINDEX] [int] NOT NULL DEFAULT (0),
	[FISCALPRINTERSERIALNUMBER] [nvarchar](20) NOT NULL DEFAULT (''),
	[ACCOUNTINGDATE] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
 CONSTRAINT [PK_RETAILZREPORT_BR] PRIMARY KEY CLUSTERED 
(
	[RESTARTOPERATIONNUMBER] ASC,
	[ZREPORTNUMBER] ASC,
	[ADDITIONALFISCALMEMORYINDEX] ASC,
	[FISCALPRINTERSERIALNUMBER] ASC,
	[TERMINALID] ASC,
	[STOREID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RETAILZREPORTTOTALIZER_BR](
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT (''),
	[REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL,
	[TERMINALID] [nvarchar](10) NOT NULL DEFAULT (''),
	[STOREID] [nvarchar](10) NOT NULL DEFAULT (''),
	[TOTALIZERNAME] [nvarchar](10) NOT NULL DEFAULT (''),
	[TOTALIZERSINTEGRANAME] [nvarchar](10) NOT NULL DEFAULT (''),
	[ZREPORTNUMBER] [int] NOT NULL DEFAULT (0),
	[ADDITIONALFISCALMEMORYINDEX] [int] NOT NULL DEFAULT (0),
	[FISCALPRINTERSERIALNUMBER] [nvarchar](20) NOT NULL DEFAULT (''),
	[TOTALIZERAMOUNT] [numeric](32, 16) NOT NULL DEFAULT (0),
 CONSTRAINT [PK_RETAILZREPORTTOTALIZER_BR] PRIMARY KEY CLUSTERED 
(
	[FISCALPRINTERSERIALNUMBER] ASC,
	[TOTALIZERNAME] ASC,
	[ZREPORTNUMBER] ASC,
	[ADDITIONALFISCALMEMORYINDEX] ASC,
	[TERMINALID] ASC,
	[STOREID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[FISCALESTABLISHMENT_BR](
	[CCMNUM_BR] [nvarchar](20) NOT NULL DEFAULT(''),
	[CNPJCPFNUM_BR] [nvarchar](20) NOT NULL DEFAULT(''),
	[DIRPARTYLOCATION] [bigint] NOT NULL DEFAULT (0),
	[FISCALESTABLISHMENTID] [nvarchar](10) NOT NULL DEFAULT(''),
	[IENUM_BR] [nvarchar](20) NOT NULL DEFAULT(''),
	[NAME] [nvarchar](60) NOT NULL DEFAULT(''),
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT(''),
	[RECID] [bigint] NOT NULL DEFAULT (0),
	[ACCOUNTANT_BR] [bigint] NOT NULL DEFAULT (0),
 CONSTRAINT [PK_FISCALESTABLISHMENT_BR] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[FISCALESTABLISHMENTINVENTSITE_BR](
	[FISCALESTABLISHMENT_BR] [bigint] NOT NULL DEFAULT (0),
	[INVENTSITE] [nvarchar](10) NOT NULL DEFAULT(''),
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT(''),
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [PK_FISCALESTABLISHMENTINVENTSITE_BR] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[INVENTLOCATION](
	[INVENTLOCATIONID] [nvarchar](10) NOT NULL DEFAULT(''),
	[NAME] [nvarchar](60) NOT NULL DEFAULT(''),
	[INVENTLOCATIONTYPE] [int] NOT NULL DEFAULT (0),
	[INVENTSITEID] [nvarchar](10) NOT NULL DEFAULT(''),
	[DATAAREAID] [nvarchar](4) NOT NULL DEFAULT(''),
	[RECID] [bigint] NOT NULL DEFAULT (0),
 CONSTRAINT [PK_INVENTLOCATION] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[INVENTLOCATIONID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO


/********************************************************************/
/****** Triggers section used for the Brazilian Fiscal Printer ******/
/********************************************************************/

/****** adding new trigger on INVENTTABLE to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_INVENTTABLE]
   ON  [dbo].[INVENTTABLE] 
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN	
	DECLARE @app NVARCHAR(128)	

	DECLARE @dataAreaIdIns NVARCHAR(4)
	DECLARE @itemIdIns NVARCHAR(20)
	DECLARE @primaryKeyIns NVARCHAR(200)
	
	DECLARE @dataAreaIdDel NVARCHAR(4)
	DECLARE @itemIdDel NVARCHAR(20)
	DECLARE @primaryKeyDel NVARCHAR(200)
		
	SET NOCOUNT ON
	SET @app = APP_NAME()	
	IF (@app <> 'Commerce Data Exchange Synch Service') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'INVENTTABLE' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'INVENTTABLE', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'INVENTTABLE' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'INVENTTABLE', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR 
				FOR SELECT DATAAREAID, ITEMID FROM inserted				
			OPEN insertedCursor		
			FETCH NEXT FROM insertedCursor INTO @dataAreaIdIns, @itemIdIns			
			
			DECLARE deletedCursor CURSOR 
				FOR SELECT DATAAREAID, ITEMID FROM deleted				
			OPEN deletedCursor		
			FETCH NEXT FROM deletedCursor INTO @dataAreaIdDel, @itemIdDel	
			
			WHILE @@FETCH_STATUS = 0
			BEGIN				
				SET @primaryKeyIns = @dataAreaIdIns + @itemIdIns
				SET @primaryKeyDel = @dataAreaIdDel + @itemIdDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR]  WHERE TABLENAME = N'INVENTTABLE' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'INVENTTABLE', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'INVENTTABLE' AND PRIMARYKEY = @primaryKeyDel
					 
				FETCH NEXT FROM deletedCursor  INTO @dataAreaIdDel, @itemIdDel	
				FETCH NEXT FROM insertedCursor INTO @dataAreaIdIns, @itemIdIns		
			END		
			
			CLOSE deletedCursor
			DEALLOCATE deletedCursor
			
			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END							
END
GO

/****** adding new trigger on INVENTTABLEMODULE to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_INVENTTABLEMODULE]
   ON  [dbo].[INVENTTABLEMODULE] 
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN	
	DECLARE @app NVARCHAR(128)	
		
	DECLARE @itemIdIns NVARCHAR(20)	
	DECLARE @moduleTypeIns INT
	DECLARE @dataAreaIdIns NVARCHAR(4)
	DECLARE @primaryKeyIns NVARCHAR(200)
	
	DECLARE @itemIdDel NVARCHAR(20)
	DECLARE @moduleTypeDel INT
	DECLARE @dataAreaIdDel NVARCHAR(4)
	DECLARE @primaryKeyDel NVARCHAR(200)
		
	SET NOCOUNT ON
	SET @app = APP_NAME()	
	IF (@app <> 'Commerce Data Exchange Synch Service') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'INVENTTABLEMODULE' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'INVENTTABLEMODULE', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'INVENTTABLEMODULE' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'INVENTTABLEMODULE', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR 
				FOR SELECT ITEMID, MODULETYPE, DATAAREAID FROM inserted				
			OPEN insertedCursor		
			FETCH NEXT FROM insertedCursor INTO @itemIdIns, @moduleTypeIns, @dataAreaIdIns
			
			DECLARE deletedCursor CURSOR 
				FOR SELECT ITEMID, MODULETYPE, DATAAREAID FROM deleted      
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @itemIdDel, @moduleTypeDel, @dataAreaIdDel
			
			WHILE @@FETCH_STATUS = 0
			BEGIN				
				SET @primaryKeyIns = @itemIdIns + CONVERT(NVARCHAR, @moduleTypeIns) + @dataAreaIdIns
				SET @primaryKeyDel = @itemIdDel + CONVERT(NVARCHAR, @moduleTypeDel) + @dataAreaIdDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'INVENTTABLEMODULE' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'INVENTTABLEMODULE', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'INVENTTABLEMODULE' AND PRIMARYKEY = @primaryKeyDel
					
				FETCH NEXT FROM deletedCursor  INTO @itemIdDel, @moduleTypeDel, @dataAreaIdDel
				FETCH NEXT FROM insertedCursor INTO @itemIdIns, @moduleTypeIns, @dataAreaIdIns	
			END		
			
			CLOSE deletedCursor
			DEALLOCATE deletedCursor
			
			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END							
END
GO

/****** adding new trigger on PRICEDISCTABLE to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_PRICEDISCTABLE]
   ON  [dbo].[PRICEDISCTABLE] 
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN	
	DECLARE @app NVARCHAR(128)		
				
	DECLARE @dataAreaIdIns NVARCHAR(4)	
	DECLARE @recIdIns BIGINT
	DECLARE @primaryKeyIns NVARCHAR(200)
	
	DECLARE @dataAreaIdDel NVARCHAR(4)	
	DECLARE @recIdDel BIGINT
	DECLARE @primaryKeyDel NVARCHAR(200)
		
	SET NOCOUNT ON
	SET @app = APP_NAME()	
	IF (@app <> 'Commerce Data Exchange Synch Service') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'PRICEDISCTABLE' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'PRICEDISCTABLE', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'PRICEDISCTABLE' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'PRICEDISCTABLE', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR 
				FOR SELECT DATAAREAID, RECID FROM inserted				
			OPEN insertedCursor		
			FETCH NEXT FROM insertedCursor INTO @dataAreaIdIns, @recIdIns
			
			DECLARE deletedCursor CURSOR 
				FOR SELECT DATAAREAID, RECID FROM deleted      
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @dataAreaIdDel, @recIdDel
			
			WHILE @@FETCH_STATUS = 0
			BEGIN				
				SET @primaryKeyIns = @dataAreaIdIns + CONVERT(NVARCHAR, @recIdIns)
				SET @primaryKeyDel = @dataAreaIdDel + CONVERT(NVARCHAR, @recIdDel)

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'PRICEDISCTABLE' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'PRICEDISCTABLE', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'PRICEDISCTABLE' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor  INTO @dataAreaIdDel, @recIdDel
				FETCH NEXT FROM insertedCursor INTO @dataAreaIdIns, @recIdIns
			END		
			
			CLOSE deletedCursor
			DEALLOCATE deletedCursor
			
			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END							
END
GO

/****** adding new trigger on TAXTABLE to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_TAXTABLE]
   ON  [dbo].[TAXTABLE] 
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN	
	DECLARE @app NVARCHAR(128)		
	
	DECLARE @taxCodeIns NVARCHAR(10)			
	DECLARE @dataAreaIdIns NVARCHAR(4)		
	DECLARE @primaryKeyIns NVARCHAR(200)
	
	DECLARE @taxCodeDel NVARCHAR(10)			
	DECLARE @dataAreaIdDel NVARCHAR(4)		
	DECLARE @primaryKeyDel NVARCHAR(200)
		
	SET NOCOUNT ON
	SET @app = APP_NAME()	
	IF (@app <> 'Commerce Data Exchange Synch Service') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'TAXTABLE' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'TAXTABLE', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'TAXTABLE' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'TAXTABLE', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR 
				FOR SELECT TAXCODE, DATAAREAID FROM inserted				
			OPEN insertedCursor		
			FETCH NEXT FROM insertedCursor INTO @taxCodeIns, @dataAreaIdIns
			
			DECLARE deletedCursor CURSOR 
				FOR SELECT TAXCODE, DATAAREAID FROM deleted      
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @taxCodeDel, @dataAreaIdDel
			
			WHILE @@FETCH_STATUS = 0
			BEGIN				
				SET @primaryKeyIns = @taxCodeIns + @dataAreaIdIns
				SET @primaryKeyDel = @taxCodeDel + @dataAreaIdDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'TAXTABLE' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'TAXTABLE', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'TAXTABLE' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor  INTO @taxCodeDel, @dataAreaIdDel
				FETCH NEXT FROM insertedCursor INTO @taxCodeIns, @dataAreaIdIns
			END		
			
			CLOSE deletedCursor
			DEALLOCATE deletedCursor
			
			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END							
END
GO

/****** adding new trigger on TAXDATA to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_TAXDATA]
   ON  [dbo].[TAXDATA] 
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN	
	DECLARE @app NVARCHAR(128)	
					
	DECLARE @dataAreaIdIns NVARCHAR(4)	
	DECLARE @recIdIns BIGINT
	DECLARE @primaryKeyIns NVARCHAR(200)
	
	DECLARE @dataAreaIdDel NVARCHAR(4)	
	DECLARE @recIdDel BIGINT
	DECLARE @primaryKeyDel NVARCHAR(200)
		
	SET NOCOUNT ON
	SET @app = APP_NAME()	
	IF (@app <> 'Commerce Data Exchange Synch Service') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'TAXDATA' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'TAXDATA', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'TAXDATA' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'TAXDATA', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR 
				FOR SELECT DATAAREAID, RECID FROM inserted				
			OPEN insertedCursor		
			FETCH NEXT FROM insertedCursor INTO @dataAreaIdIns, @recIdIns
			
			DECLARE deletedCursor CURSOR 
				FOR SELECT DATAAREAID, RECID FROM deleted      
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @dataAreaIdDel, @recIdDel
			
			WHILE @@FETCH_STATUS = 0
			BEGIN				
				SET @primaryKeyIns = @dataAreaIdIns + CONVERT(NVARCHAR, @recIdIns)
				SET @primaryKeyDel = @dataAreaIdDel + CONVERT(NVARCHAR, @recIdDel)

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'TAXDATA' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'TAXDATA', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'TAXDATA' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor  INTO @dataAreaIdDel, @recIdDel
				FETCH NEXT FROM insertedCursor INTO @dataAreaIdIns, @recIdIns
			END		
			
			CLOSE deletedCursor
			DEALLOCATE deletedCursor
			
			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END							
END
GO

/****** adding new trigger on TAXONITEM to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_TAXONITEM]
   ON  [dbo].[TAXONITEM] 
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN	
	DECLARE @app NVARCHAR(128)		
	
	DECLARE @taxItemGroupIns NVARCHAR(10)
	DECLARE @taxCodeIns NVARCHAR(10)			
	DECLARE @dataAreaIdIns NVARCHAR(4)		
	DECLARE @primaryKeyIns NVARCHAR(200)
	
	DECLARE @taxItemGroupDel NVARCHAR(10)
	DECLARE @taxCodeDel NVARCHAR(10)			
	DECLARE @dataAreaIdDel NVARCHAR(4)		
	DECLARE @primaryKeyDel NVARCHAR(200)
		
	SET NOCOUNT ON
	SET @app = APP_NAME()	
	IF (@app <> 'Commerce Data Exchange Synch Service') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'TAXONITEM' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'TAXONITEM', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'TAXONITEM' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'TAXONITEM', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR 
				FOR SELECT TAXITEMGROUP, TAXCODE, DATAAREAID FROM inserted				
			OPEN insertedCursor		
			FETCH NEXT FROM insertedCursor INTO @taxItemGroupIns, @taxCodeIns, @dataAreaIdIns
			
			DECLARE deletedCursor CURSOR 
				FOR SELECT TAXITEMGROUP, TAXCODE, DATAAREAID FROM deleted				
			OPEN deletedCursor		
			FETCH NEXT FROM deletedCursor INTO @taxItemGroupDel, @taxCodeDel, @dataAreaIdDel	
			
			WHILE @@FETCH_STATUS = 0
			BEGIN				
				SET @primaryKeyIns = @taxItemGroupIns + @taxCodeIns + @dataAreaIdIns				
				SET @primaryKeyDel = @taxItemGroupDel + @taxCodeDel + @dataAreaIdDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'TAXONITEM' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'TAXONITEM', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'TAXONITEM' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor  INTO @taxItemGroupDel, @taxCodeDel, @dataAreaIdDel	
				FETCH NEXT FROM insertedCursor INTO @taxItemGroupIns, @taxCodeIns, @dataAreaIdIns
			END	
				
			CLOSE deletedCursor
			DEALLOCATE deletedCursor
			
			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END							
END
GO

/****** adding new trigger on RETAILSTORETABLE to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_RETAILSTORETABLE]
   ON  [dbo].[RETAILSTORETABLE] 
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN	
	DECLARE @app NVARCHAR(128)		
					
	DECLARE @storeNumberIns NVARCHAR(10)
	DECLARE @primaryKeyIns NVARCHAR(200)
		
	DECLARE @storeNumberDel NVARCHAR(10)
	DECLARE @primaryKeyDel NVARCHAR(200)
		
	SET NOCOUNT ON
	SET @app = APP_NAME()	
	IF (@app <> 'Commerce Data Exchange Synch Service') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILSTORETABLE' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILSTORETABLE', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILSTORETABLE' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILSTORETABLE', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR 
				FOR SELECT STORENUMBER FROM inserted				
			OPEN insertedCursor		
			FETCH NEXT FROM insertedCursor INTO @storeNumberIns
			
			DECLARE deletedCursor CURSOR 
				FOR SELECT STORENUMBER FROM deleted      
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @storeNumberDel
			
			WHILE @@FETCH_STATUS = 0
			BEGIN				
				SET @primaryKeyIns = @storeNumberIns				
				SET @primaryKeyDel = @storeNumberDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILSTORETABLE' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILSTORETABLE', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'RETAILSTORETABLE' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor  INTO @storeNumberDel
				FETCH NEXT FROM insertedCursor INTO @storeNumberIns
			END	
				
			CLOSE deletedCursor
			DEALLOCATE deletedCursor
			
			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END							
END
GO

/****** adding new trigger on RETAILINVENTORY_BR to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_RETAILINVENTORY_BR]
   ON  [dbo].[RETAILINVENTORY_BR] 
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN	
	DECLARE @app NVARCHAR(128)		
	
	DECLARE @dataAreaIdIns NVARCHAR(4)	
	DECLARE @terminalIdIns NVARCHAR(10)
	DECLARE @storeIdIns NVARCHAR(10)	
	DECLARE @itemIdIns NVARCHAR(20)
	DECLARE @primaryKeyIns NVARCHAR(200)
	
	DECLARE @dataAreaIdDel NVARCHAR(4)	
	DECLARE @terminalIdDel NVARCHAR(10)
	DECLARE @storeIdDel NVARCHAR(10)	
	DECLARE @itemIdDel NVARCHAR(20)
	DECLARE @primaryKeyDel NVARCHAR(200)
		
	SET NOCOUNT ON
	SET @app = APP_NAME()	
	IF (@app <> 'Microsoft Dynamics AX for Retail POS') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILINVENTORY_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILINVENTORY_BR', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILINVENTORY_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILINVENTORY_BR', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR 
				FOR SELECT DATAAREAID, TERMINALID, STOREID, ITEMID FROM inserted				
			OPEN insertedCursor		
			FETCH NEXT FROM insertedCursor INTO @dataAreaIdIns, @terminalIdIns, @storeIdIns, @itemIdIns
			
			DECLARE deletedCursor CURSOR 
				FOR SELECT DATAAREAID, TERMINALID, STOREID, ITEMID FROM deleted      
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @dataAreaIdDel, @terminalIdDel, @storeIdDel, @itemIdDel
                  
			WHILE @@FETCH_STATUS = 0
			BEGIN				
				SET @primaryKeyIns = @dataAreaIdIns + @terminalIdIns + @storeIdIns + @itemIdIns				
                SET @primaryKeyDel = @dataAreaIdDel + @terminalIdDel + @storeIdDel + @itemIdDel
                
                IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILINVENTORY_BR' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILINVENTORY_BR', @primaryKeyIns, @app)
                ELSE
                    UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'RETAILINVENTORY_BR' AND PRIMARYKEY = @primaryKeyDel
                
                FETCH NEXT FROM deletedCursor INTO @dataAreaIdDel, @terminalIdDel, @storeIdDel, @itemIdDel
				FETCH NEXT FROM insertedCursor INTO @dataAreaIdIns, @terminalIdIns, @storeIdIns, @itemIdIns
			END		
			
			CLOSE deletedCursor
			DEALLOCATE deletedCursor
			
			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END							
END
GO

/****** adding new trigger on RETAILINVENTORYHEADER_BR to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_RETAILINVENTORYHEADER_BR]
	ON  [dbo].[RETAILINVENTORYHEADER_BR]
	AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @app NVARCHAR(128)

	DECLARE @dataareaidIns NVARCHAR(4)
	DECLARE @storeidIns NVARCHAR(10)
	DECLARE @terminalidIns NVARCHAR(10)
	DECLARE @primaryKeyIns NVARCHAR(200)

	DECLARE @dataareaidDel NVARCHAR(4)
	DECLARE @storeidDel NVARCHAR(10)
	DECLARE @terminalidDel NVARCHAR(10)
	DECLARE @primaryKeyDel NVARCHAR(200)

	SET NOCOUNT ON
	SET @app = APP_NAME()
	IF (@app <> 'Microsoft Dynamics AX for Retail POS') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILINVENTORYHEADER_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILINVENTORYHEADER_BR', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILINVENTORYHEADER_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILINVENTORYHEADER_BR', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR
				FOR SELECT DATAAREAID, STOREID, TERMINALID FROM inserted
			OPEN insertedCursor
			FETCH NEXT FROM insertedCursor INTO @dataareaidIns, @storeidIns, @terminalidIns

			DECLARE deletedCursor CURSOR
				FOR SELECT DATAAREAID, STOREID, TERMINALID FROM deleted
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @dataareaidDel, @storeidDel, @terminalidDel

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @primaryKeyIns = @dataareaidIns + @storeidIns + @terminalidIns
				SET @primaryKeyDel = @dataareaidDel + @storeidDel + @terminalidDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILINVENTORYHEADER_BR' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILINVENTORYHEADER_BR', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'RETAILINVENTORYHEADER_BR' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor INTO @dataareaidDel, @storeidDel, @terminalidDel
				FETCH NEXT FROM insertedCursor INTO @dataareaidIns, @storeidIns, @terminalidIns
			END

			CLOSE deletedCursor
			DEALLOCATE deletedCursor

			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END
END
GO

/****** adding new trigger on RETAILFISCALRECEIPT_BR to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_RETAILFISCALRECEIPT_BR]
	ON  [dbo].[RETAILFISCALRECEIPT_BR]
	AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @app NVARCHAR(128)

	DECLARE @transactionidIns NVARCHAR(44)
	DECLARE @terminalidIns NVARCHAR(10)
	DECLARE @storeidIns NVARCHAR(10)
	DECLARE @dataareaidIns NVARCHAR(4)
	DECLARE @primaryKeyIns NVARCHAR(200)

	DECLARE @transactionidDel NVARCHAR(44)
	DECLARE @terminalidDel NVARCHAR(10)
	DECLARE @storeidDel NVARCHAR(10)
	DECLARE @dataareaidDel NVARCHAR(4)
	DECLARE @primaryKeyDel NVARCHAR(200)

	SET NOCOUNT ON
	SET @app = APP_NAME()
	IF (@app <> 'Microsoft Dynamics AX for Retail POS') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALRECEIPT_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALRECEIPT_BR', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALRECEIPT_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALRECEIPT_BR', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR
				FOR SELECT TRANSACTIONID, TERMINALID, STOREID, DATAAREAID FROM inserted
			OPEN insertedCursor
			FETCH NEXT FROM insertedCursor INTO @transactionidIns, @terminalidIns, @storeidIns, @dataareaidIns

			DECLARE deletedCursor CURSOR
				FOR SELECT TRANSACTIONID, TERMINALID, STOREID, DATAAREAID FROM deleted
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @transactionidDel, @terminalidDel, @storeidDel, @dataareaidDel

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @primaryKeyIns = @transactionidIns + @terminalidIns + @storeidIns + @dataareaidIns
				SET @primaryKeyDel = @transactionidDel + @terminalidDel + @storeidDel + @dataareaidDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALRECEIPT_BR' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALRECEIPT_BR', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'RETAILFISCALRECEIPT_BR' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor INTO @transactionidDel, @terminalidDel, @storeidDel, @dataareaidDel
				FETCH NEXT FROM insertedCursor INTO @transactionidIns, @terminalidIns, @storeidIns, @dataareaidIns
			END

			CLOSE deletedCursor
			DEALLOCATE deletedCursor

			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END
END
GO

/****** adding new trigger on RETAILFISCALRECEIPTLINE_BR to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_RETAILFISCALRECEIPTLINE_BR]
	ON  [dbo].[RETAILFISCALRECEIPTLINE_BR]
	AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @app NVARCHAR(128)

	DECLARE @linenumIns NUMERIC(32,16)
	DECLARE @transactionidIns NVARCHAR(44)
	DECLARE @terminalidIns NVARCHAR(10)
	DECLARE @storeidIns NVARCHAR(10)
	DECLARE @dataareaidIns NVARCHAR(4)
	DECLARE @primaryKeyIns NVARCHAR(200)

	DECLARE @linenumDel NUMERIC(32,16)
	DECLARE @transactionidDel NVARCHAR(44)
	DECLARE @terminalidDel NVARCHAR(10)
	DECLARE @storeidDel NVARCHAR(10)
	DECLARE @dataareaidDel NVARCHAR(4)
	DECLARE @primaryKeyDel NVARCHAR(200)

	SET NOCOUNT ON
	SET @app = APP_NAME()
	IF (@app <> 'Microsoft Dynamics AX for Retail POS') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALRECEIPTLINE_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALRECEIPTLINE_BR', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALRECEIPTLINE_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALRECEIPTLINE_BR', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR
				FOR SELECT LINENUM, TRANSACTIONID, TERMINALID, STOREID, DATAAREAID FROM inserted
			OPEN insertedCursor
			FETCH NEXT FROM insertedCursor INTO @linenumIns, @transactionidIns, @terminalidIns, @storeidIns, @dataareaidIns

			DECLARE deletedCursor CURSOR
				FOR SELECT LINENUM, TRANSACTIONID, TERMINALID, STOREID, DATAAREAID FROM deleted
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @linenumDel, @transactionidDel, @terminalidDel, @storeidDel, @dataareaidDel

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @primaryKeyIns = REPLACE(CONVERT(NVARCHAR, @linenumIns), ',', '.') + @transactionidIns + @terminalidIns + @storeidIns + @dataareaidIns
				SET @primaryKeyDel = REPLACE(CONVERT(NVARCHAR, @linenumDel), ',', '.') + @transactionidDel + @terminalidDel + @storeidDel + @dataareaidDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALRECEIPTLINE_BR' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALRECEIPTLINE_BR', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'RETAILFISCALRECEIPTLINE_BR' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor INTO @linenumDel, @transactionidDel, @terminalidDel, @storeidDel, @dataareaidDel
				FETCH NEXT FROM insertedCursor INTO @linenumIns, @transactionidIns, @terminalidIns, @storeidIns, @dataareaidIns
			END

			CLOSE deletedCursor
			DEALLOCATE deletedCursor

			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END
END
GO

/****** adding new trigger on RETAILFISCALRECEIPTTAXTRANS_BR to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_RETAILFISCALRECEIPTTAXTRANS_BR]
	ON  [dbo].[RETAILFISCALRECEIPTTAXTRANS_BR]
	AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @app NVARCHAR(128)

	DECLARE @taxtypeIns INT
	DECLARE @linenumIns NUMERIC(32,16)
	DECLARE @transactionidIns NVARCHAR(44)
	DECLARE @terminalidIns NVARCHAR(10)
	DECLARE @storeidIns NVARCHAR(10)
	DECLARE @dataareaidIns NVARCHAR(4)
	DECLARE @primaryKeyIns NVARCHAR(200)

	DECLARE @taxtypeDel INT
	DECLARE @linenumDel NUMERIC(32,16)
	DECLARE @transactionidDel NVARCHAR(44)
	DECLARE @terminalidDel NVARCHAR(10)
	DECLARE @storeidDel NVARCHAR(10)
	DECLARE @dataareaidDel NVARCHAR(4)
	DECLARE @primaryKeyDel NVARCHAR(200)

	SET NOCOUNT ON
	SET @app = APP_NAME()
	IF (@app <> 'Microsoft Dynamics AX for Retail POS') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALRECEIPTTAXTRANS_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALRECEIPTTAXTRANS_BR', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALRECEIPTTAXTRANS_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALRECEIPTTAXTRANS_BR', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR
				FOR SELECT TAXTYPE, LINENUM, TRANSACTIONID, TERMINALID, STOREID, DATAAREAID FROM inserted
			OPEN insertedCursor
			FETCH NEXT FROM insertedCursor INTO @taxtypeIns, @linenumIns, @transactionidIns, @terminalidIns, @storeidIns, @dataareaidIns

			DECLARE deletedCursor CURSOR
				FOR SELECT TAXTYPE, LINENUM, TRANSACTIONID, TERMINALID, STOREID, DATAAREAID FROM deleted
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @taxtypeDel, @linenumDel, @transactionidDel, @terminalidDel, @storeidDel, @dataareaidDel

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @primaryKeyIns = CONVERT(NVARCHAR, @taxtypeIns) + REPLACE(CONVERT(NVARCHAR, @linenumIns), ',', '.') + @transactionidIns + @terminalidIns + @storeidIns + @dataareaidIns
				SET @primaryKeyDel = CONVERT(NVARCHAR, @taxtypeDel) + REPLACE(CONVERT(NVARCHAR, @linenumDel), ',', '.') + @transactionidDel + @terminalidDel + @storeidDel + @dataareaidDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALRECEIPTTAXTRANS_BR' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALRECEIPTTAXTRANS_BR', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'RETAILFISCALRECEIPTTAXTRANS_BR' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor INTO @taxtypeDel, @linenumDel, @transactionidDel, @terminalidDel, @storeidDel, @dataareaidDel
				FETCH NEXT FROM insertedCursor INTO @taxtypeIns, @linenumIns, @transactionidIns, @terminalidIns, @storeidIns, @dataareaidIns
			END

			CLOSE deletedCursor
			DEALLOCATE deletedCursor

			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END
END
GO

/****** adding new trigger on RETAILTRANSACTIONPAYMENTTRANS_BR to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_RETAILTRANSACTIONPAYMENTTRANS_BR]
	ON  [dbo].[RETAILTRANSACTIONPAYMENTTRANS_BR]
	AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @app NVARCHAR(128)

	DECLARE @linenumIns NUMERIC(32,16)
	DECLARE @transactionidIns NVARCHAR(44)
	DECLARE @terminalidIns NVARCHAR(10)
	DECLARE @storeidIns NVARCHAR(10)
	DECLARE @dataareaidIns NVARCHAR(4)
	DECLARE @primaryKeyIns NVARCHAR(200)

	DECLARE @linenumDel NUMERIC(32,16)
	DECLARE @transactionidDel NVARCHAR(44)
	DECLARE @terminalidDel NVARCHAR(10)
	DECLARE @storeidDel NVARCHAR(10)
	DECLARE @dataareaidDel NVARCHAR(4)
	DECLARE @primaryKeyDel NVARCHAR(200)

	SET NOCOUNT ON
	SET @app = APP_NAME()
	IF (@app <> 'Microsoft Dynamics AX for Retail POS') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILTRANSACTIONPAYMENTTRANS_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILTRANSACTIONPAYMENTTRANS_BR', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILTRANSACTIONPAYMENTTRANS_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILTRANSACTIONPAYMENTTRANS_BR', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR
				FOR SELECT LINENUM, TRANSACTIONID, TERMINALID, STOREID, DATAAREAID FROM inserted
			OPEN insertedCursor
			FETCH NEXT FROM insertedCursor INTO @linenumIns, @transactionidIns, @terminalidIns, @storeidIns, @dataareaidIns

			DECLARE deletedCursor CURSOR
				FOR SELECT LINENUM, TRANSACTIONID, TERMINALID, STOREID, DATAAREAID FROM deleted
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @linenumDel, @transactionidDel, @terminalidDel, @storeidDel, @dataareaidDel

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @primaryKeyIns = REPLACE(CONVERT(NVARCHAR, @linenumIns), ',', '.') + @transactionidIns + @terminalidIns + @storeidIns + @dataareaidIns
				SET @primaryKeyDel = REPLACE(CONVERT(NVARCHAR, @linenumDel), ',', '.') + @transactionidDel + @terminalidDel + @storeidDel + @dataareaidDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILTRANSACTIONPAYMENTTRANS_BR' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILTRANSACTIONPAYMENTTRANS_BR', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'RETAILTRANSACTIONPAYMENTTRANS_BR' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor INTO @linenumDel, @transactionidDel, @terminalidDel, @storeidDel, @dataareaidDel
				FETCH NEXT FROM insertedCursor INTO @linenumIns, @transactionidIns, @terminalidIns, @storeidIns, @dataareaidIns
			END

			CLOSE deletedCursor
			DEALLOCATE deletedCursor

			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END
END
GO

/****** adding new trigger on RETAILZREPORT_BR to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_RETAILZREPORT_BR]
	ON  [dbo].[RETAILZREPORT_BR]
	AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @app NVARCHAR(128)

	DECLARE @restartoperationnumberIns INT
	DECLARE @zreportnumberIns INT
	DECLARE @additionalfiscalmemoryindexIns INT
	DECLARE @fiscalprinterserialnumberIns NVARCHAR(20)
	DECLARE @terminalidIns NVARCHAR(10)
	DECLARE @storeidIns NVARCHAR(10)
	DECLARE @dataareaidIns NVARCHAR(4)
	DECLARE @primaryKeyIns NVARCHAR(200)

	DECLARE @restartoperationnumberDel INT
	DECLARE @zreportnumberDel INT
	DECLARE @additionalfiscalmemoryindexDel INT
	DECLARE @fiscalprinterserialnumberDel NVARCHAR(20)
	DECLARE @terminalidDel NVARCHAR(10)
	DECLARE @storeidDel NVARCHAR(10)
	DECLARE @dataareaidDel NVARCHAR(4)
	DECLARE @primaryKeyDel NVARCHAR(200)

	SET NOCOUNT ON
	SET @app = APP_NAME()
	IF (@app <> 'Microsoft Dynamics AX for Retail POS') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILZREPORT_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILZREPORT_BR', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILZREPORT_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILZREPORT_BR', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR
				FOR SELECT RESTARTOPERATIONNUMBER, ZREPORTNUMBER, ADDITIONALFISCALMEMORYINDEX, FISCALPRINTERSERIALNUMBER, TERMINALID, STOREID, DATAAREAID FROM inserted
			OPEN insertedCursor
			FETCH NEXT FROM insertedCursor INTO @restartoperationnumberIns, @zreportnumberIns, @additionalfiscalmemoryindexIns, @fiscalprinterserialnumberIns, @terminalidIns, @storeidIns, @dataareaidIns

			DECLARE deletedCursor CURSOR
				FOR SELECT RESTARTOPERATIONNUMBER, ZREPORTNUMBER, ADDITIONALFISCALMEMORYINDEX, FISCALPRINTERSERIALNUMBER, TERMINALID, STOREID, DATAAREAID FROM deleted
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @restartoperationnumberDel, @zreportnumberDel, @additionalfiscalmemoryindexDel, @fiscalprinterserialnumberDel, @terminalidDel, @storeidDel, @dataareaidDel

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @primaryKeyIns = CONVERT(NVARCHAR, @restartoperationnumberIns) + CONVERT(NVARCHAR, @zreportnumberIns) + CONVERT(NVARCHAR, @additionalfiscalmemoryindexIns) + @fiscalprinterserialnumberIns + @terminalidIns + @storeidIns + @dataareaidIns
				SET @primaryKeyDel = CONVERT(NVARCHAR, @restartoperationnumberDel) + CONVERT(NVARCHAR, @zreportnumberDel) + CONVERT(NVARCHAR, @additionalfiscalmemoryindexDel) + @fiscalprinterserialnumberDel + @terminalidDel + @storeidDel + @dataareaidDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILZREPORT_BR' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILZREPORT_BR', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'RETAILZREPORT_BR' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor INTO @restartoperationnumberDel, @zreportnumberDel, @additionalfiscalmemoryindexDel, @fiscalprinterserialnumberDel, @terminalidDel, @storeidDel, @dataareaidDel
				FETCH NEXT FROM insertedCursor INTO @restartoperationnumberIns, @zreportnumberIns, @additionalfiscalmemoryindexIns, @fiscalprinterserialnumberIns, @terminalidIns, @storeidIns, @dataareaidIns
			END

			CLOSE deletedCursor
			DEALLOCATE deletedCursor

			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END
END
GO

/****** adding new trigger on RETAILZREPORTTOTALIZER_BR to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_RETAILZREPORTTOTALIZER_BR]
	ON  [dbo].[RETAILZREPORTTOTALIZER_BR]
	AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @app NVARCHAR(128)

	DECLARE @fiscalprinterserialnumberIns NVARCHAR(20)
	DECLARE @totalizernameIns NVARCHAR(10)
	DECLARE @zreportnumberIns INT
	DECLARE @additionalfiscalmemoryindexIns INT
	DECLARE @terminalidIns NVARCHAR(10)
	DECLARE @storeidIns NVARCHAR(10)
	DECLARE @dataareaidIns NVARCHAR(4)
	DECLARE @primaryKeyIns NVARCHAR(200)

	DECLARE @fiscalprinterserialnumberDel NVARCHAR(20)
	DECLARE @totalizernameDel NVARCHAR(10)
	DECLARE @zreportnumberDel INT
	DECLARE @additionalfiscalmemoryindexDel INT
	DECLARE @terminalidDel NVARCHAR(10)
	DECLARE @storeidDel NVARCHAR(10)
	DECLARE @dataareaidDel NVARCHAR(4)
	DECLARE @primaryKeyDel NVARCHAR(200)

	SET NOCOUNT ON
	SET @app = APP_NAME()
	IF (@app <> 'Microsoft Dynamics AX for Retail POS') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILZREPORTTOTALIZER_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILZREPORTTOTALIZER_BR', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILZREPORTTOTALIZER_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILZREPORTTOTALIZER_BR', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR
				FOR SELECT FISCALPRINTERSERIALNUMBER, TOTALIZERNAME, ZREPORTNUMBER, ADDITIONALFISCALMEMORYINDEX, TERMINALID, STOREID, DATAAREAID FROM inserted
			OPEN insertedCursor
			FETCH NEXT FROM insertedCursor INTO @fiscalprinterserialnumberIns, @totalizernameIns, @zreportnumberIns, @additionalfiscalmemoryindexIns, @terminalidIns, @storeidIns, @dataareaidIns

			DECLARE deletedCursor CURSOR
				FOR SELECT FISCALPRINTERSERIALNUMBER, TOTALIZERNAME, ZREPORTNUMBER, ADDITIONALFISCALMEMORYINDEX, TERMINALID, STOREID, DATAAREAID FROM deleted
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @fiscalprinterserialnumberDel, @totalizernameDel, @zreportnumberDel, @additionalfiscalmemoryindexDel, @terminalidDel, @storeidDel, @dataareaidDel

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @primaryKeyIns = @fiscalprinterserialnumberIns + @totalizernameIns + CONVERT(NVARCHAR, @zreportnumberIns) + CONVERT(NVARCHAR, @additionalfiscalmemoryindexIns) + @terminalidIns + @storeidIns + @dataareaidIns
				SET @primaryKeyDel = @fiscalprinterserialnumberDel + @totalizernameDel + CONVERT(NVARCHAR, @zreportnumberDel) + CONVERT(NVARCHAR, @additionalfiscalmemoryindexDel) + @terminalidDel + @storeidDel + @dataareaidDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILZREPORTTOTALIZER_BR' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILZREPORTTOTALIZER_BR', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'RETAILZREPORTTOTALIZER_BR' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor INTO @fiscalprinterserialnumberDel, @totalizernameDel, @zreportnumberDel, @additionalfiscalmemoryindexDel, @terminalidDel, @storeidDel, @dataareaidDel
				FETCH NEXT FROM insertedCursor INTO @fiscalprinterserialnumberIns, @totalizernameIns, @zreportnumberIns, @additionalfiscalmemoryindexIns, @terminalidIns, @storeidIns, @dataareaidIns
			END

			CLOSE deletedCursor
			DEALLOCATE deletedCursor

			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END
END
GO

/****** adding new trigger on RETAILFISCALPRINTER_BR to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_RETAILFISCALPRINTER_BR]
        ON  [dbo].[RETAILFISCALPRINTER_BR]
        AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    DECLARE @app NVARCHAR(128)

    DECLARE @restartoperationnumberIns INT
    DECLARE @additionalfiscalmemoryindexIns INT
    DECLARE @serialnumberIns NVARCHAR(20)
    DECLARE @terminalidIns NVARCHAR(10)
    DECLARE @storeidIns NVARCHAR(10)
    DECLARE @dataareaidIns NVARCHAR(4)
    DECLARE @primaryKeyIns NVARCHAR(200)

    DECLARE @restartoperationnumberDel INT
    DECLARE @additionalfiscalmemoryindexDel INT
    DECLARE @serialnumberDel NVARCHAR(20)
    DECLARE @terminalidDel NVARCHAR(10)
    DECLARE @storeidDel NVARCHAR(10)
    DECLARE @dataareaidDel NVARCHAR(4)
    DECLARE @primaryKeyDel NVARCHAR(200)

    SET NOCOUNT ON
    SET @app = APP_NAME()
    IF (@app <> 'Microsoft Dynamics AX for Retail POS') AND (@app <> 'Retail Offline Sync Service')
    BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALPRINTER_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALPRINTER_BR', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALPRINTER_BR' AND PRIMARYKEY = N'INSORDEL')
			   INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALPRINTER_BR', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR
				FOR SELECT RESTARTOPERATIONNUMBER, ADDITIONALFISCALMEMORYINDEX, SERIALNUMBER, TERMINALID, STOREID, DATAAREAID FROM inserted
			OPEN insertedCursor
			FETCH NEXT FROM insertedCursor INTO @restartoperationnumberIns, @additionalfiscalmemoryindexIns, @serialnumberIns, @terminalidIns, @storeidIns, @dataareaidIns

			 DECLARE deletedCursor CURSOR
				FOR SELECT RESTARTOPERATIONNUMBER, ADDITIONALFISCALMEMORYINDEX, SERIALNUMBER, TERMINALID, STOREID, DATAAREAID FROM deleted
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @restartoperationnumberDel, @additionalfiscalmemoryindexDel, @serialnumberDel, @terminalidDel, @storeidDel, @dataareaidDel

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @primaryKeyIns = CONVERT(NVARCHAR, @restartoperationnumberIns) + CONVERT(NVARCHAR, @additionalfiscalmemoryindexIns) + @serialnumberIns + @terminalidIns + @storeidIns + @dataareaidIns
				SET @primaryKeyDel = CONVERT(NVARCHAR, @restartoperationnumberDel) + CONVERT(NVARCHAR, @additionalfiscalmemoryindexDel) + @serialnumberDel + @terminalidDel + @storeidDel + @dataareaidDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALPRINTER_BR' AND PRIMARYKEY = @primaryKeyDel)
				   INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALPRINTER_BR', @primaryKeyIns, @app)
				ELSE
				   UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'RETAILFISCALPRINTER_BR' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor INTO @restartoperationnumberDel, @additionalfiscalmemoryindexDel, @serialnumberDel, @terminalidDel, @storeidDel, @dataareaidDel
				FETCH NEXT FROM insertedCursor INTO @restartoperationnumberIns, @additionalfiscalmemoryindexIns, @serialnumberIns, @terminalidIns, @storeidIns, @dataareaidIns
			END

			CLOSE deletedCursor
			DEALLOCATE deletedCursor

			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
    END
END
GO

/****** adding new trigger on RETAILFISCALPRINTERREPORT_BR to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_RETAILFISCALPRINTERREPORT_BR]
	ON  [dbo].[RETAILFISCALPRINTERREPORT_BR]
	AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @app NVARCHAR(128)

	DECLARE @restartoperationnumberIns INT
	DECLARE @receiptnumberIns INT
	DECLARE @additionalfiscalmemoryindexIns INT
	DECLARE @fiscalprinterserialnumberIns NVARCHAR(20)
	DECLARE @terminalidIns NVARCHAR(10)
	DECLARE @storeidIns NVARCHAR(10)
	DECLARE @dataareaidIns NVARCHAR(4)
	DECLARE @primaryKeyIns NVARCHAR(200)

	DECLARE @restartoperationnumberDel INT
	DECLARE @receiptnumberDel INT
	DECLARE @additionalfiscalmemoryindexDel INT
	DECLARE @fiscalprinterserialnumberDel NVARCHAR(20)
	DECLARE @terminalidDel NVARCHAR(10)
	DECLARE @storeidDel NVARCHAR(10)
	DECLARE @dataareaidDel NVARCHAR(4)
	DECLARE @primaryKeyDel NVARCHAR(200)

	SET NOCOUNT ON
	SET @app = APP_NAME()
	IF (@app <> 'Microsoft Dynamics AX for Retail POS') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALPRINTERREPORT_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALPRINTERREPORT_BR', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALPRINTERREPORT_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALPRINTERREPORT_BR', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR
				FOR SELECT RESTARTOPERATIONNUMBER, RECEIPTNUMBER, ADDITIONALFISCALMEMORYINDEX, FISCALPRINTERSERIALNUMBER, TERMINALID, STOREID, DATAAREAID FROM inserted
			OPEN insertedCursor
			FETCH NEXT FROM insertedCursor INTO @restartoperationnumberIns, @receiptnumberIns, @additionalfiscalmemoryindexIns, @fiscalprinterserialnumberIns, @terminalidIns, @storeidIns, @dataareaidIns

			DECLARE deletedCursor CURSOR
				FOR SELECT RESTARTOPERATIONNUMBER, RECEIPTNUMBER, ADDITIONALFISCALMEMORYINDEX, FISCALPRINTERSERIALNUMBER, TERMINALID, STOREID, DATAAREAID FROM deleted
			OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @restartoperationnumberDel, @receiptnumberDel, @additionalfiscalmemoryindexDel, @fiscalprinterserialnumberDel, @terminalidDel, @storeidDel, @dataareaidDel

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @primaryKeyIns = CONVERT(NVARCHAR, @restartoperationnumberIns) + CONVERT(NVARCHAR, @receiptnumberIns) + CONVERT(NVARCHAR, @additionalfiscalmemoryindexIns) + @fiscalprinterserialnumberIns + @terminalidIns + @storeidIns + @dataareaidIns
				SET @primaryKeyDel = CONVERT(NVARCHAR, @restartoperationnumberDel) + CONVERT(NVARCHAR, @receiptnumberDel) + CONVERT(NVARCHAR, @additionalfiscalmemoryindexDel) + @fiscalprinterserialnumberDel + @terminalidDel + @storeidDel + @dataareaidDel

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'RETAILFISCALPRINTERREPORT_BR' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'RETAILFISCALPRINTERREPORT_BR', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'RETAILFISCALPRINTERREPORT_BR' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor INTO @restartoperationnumberDel, @receiptnumberDel, @additionalfiscalmemoryindexDel, @fiscalprinterserialnumberDel, @terminalidDel, @storeidDel, @dataareaidDel
				FETCH NEXT FROM insertedCursor INTO @restartoperationnumberIns, @receiptnumberIns, @additionalfiscalmemoryindexIns, @fiscalprinterserialnumberIns, @terminalidIns, @storeidIns, @dataareaidIns
			END

			CLOSE deletedCursor
			DEALLOCATE deletedCursor

			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END
END
GO

/****** adding new trigger on FISCALESTABLISHMENT_BR to track manual database changes for Brazil ******/
CREATE TRIGGER [dbo].[manualChanges_FISCALESTABLISHMENT_BR]
	ON  [dbo].[FISCALESTABLISHMENT_BR]
	AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @app NVARCHAR(128)

	DECLARE @recidIns BIGINT
	DECLARE @primaryKeyIns NVARCHAR(200)

	DECLARE @recidDel BIGINT
	DECLARE @primaryKeyDel NVARCHAR(200)

	SET NOCOUNT ON
	SET @app = APP_NAME()
	IF (@app <> 'Commerce Data Exchange Synch Service') AND (@app <> 'Retail Offline Sync Service')
	BEGIN
		-- delete
		IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'FISCALESTABLISHMENT_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'FISCALESTABLISHMENT_BR', N'INSORDEL', @app)
		END
		ELSE
		-- insert
		IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'FISCALESTABLISHMENT_BR' AND PRIMARYKEY = N'INSORDEL')
				INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'FISCALESTABLISHMENT_BR', N'INSORDEL', @app)
		END
		ELSE
		-- update
		BEGIN
			DECLARE insertedCursor CURSOR
			FOR SELECT RECID FROM inserted
				OPEN insertedCursor
			FETCH NEXT FROM insertedCursor INTO @recidIns

			DECLARE deletedCursor CURSOR
			FOR SELECT RECID FROM deleted
				OPEN deletedCursor
			FETCH NEXT FROM deletedCursor INTO @recidDel

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @primaryKeyIns = CONVERT(NVARCHAR, @recidIns)
				SET @primaryKeyDel = CONVERT(NVARCHAR, @recidDel)

				IF NOT EXISTS (SELECT * FROM [dbo].[RETAILMANUALCHANGESLOG_BR] WHERE TABLENAME = N'FISCALESTABLISHMENT_BR' AND PRIMARYKEY = @primaryKeyDel)
					INSERT INTO [dbo].[RETAILMANUALCHANGESLOG_BR] VALUES (N'FISCALESTABLISHMENT_BR', @primaryKeyIns, @app)
				ELSE
					UPDATE [dbo].[RETAILMANUALCHANGESLOG_BR] SET PRIMARYKEY = @primaryKeyIns WHERE TABLENAME = N'FISCALESTABLISHMENT_BR' AND PRIMARYKEY = @primaryKeyDel

				FETCH NEXT FROM deletedCursor INTO @recidDel
				FETCH NEXT FROM insertedCursor INTO @recidIns
			END

			CLOSE deletedCursor
			DEALLOCATE deletedCursor

			CLOSE insertedCursor
			DEALLOCATE insertedCursor
		END
	END
END
GO

/*
 * CREATE RETAILINVENTAVAILABILITY TABLE FOR INVENTORY AVAILABILITY
 */
CREATE TABLE [dbo].[RETAILINVENTAVAILABILITY](
    [RECID] [bigint] NOT NULL,
    [ITEMRECID] [bigint] NOT NULL,
    [INVENTDIMRECID] [bigint] NOT NULL,
    [AVAILPHYSICAL] [numeric](32, 16) NOT NULL,
    [LASTINVENTTRANS] [bigint] NOT NULL,
 CONSTRAINT [I_101297RECID] PRIMARY KEY CLUSTERED 
(
    [RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILINVENTAVAILABILITY]  WITH CHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[RETAILINVENTAVAILABILITY] ADD  DEFAULT ((0)) FOR [ITEMRECID]
GO

ALTER TABLE [dbo].[RETAILINVENTAVAILABILITY] ADD  DEFAULT ((0)) FOR [INVENTDIMRECID]
GO

ALTER TABLE [dbo].[RETAILINVENTAVAILABILITY] ADD  DEFAULT ((0)) FOR [AVAILPHYSICAL]
GO

ALTER TABLE [dbo].[RETAILINVENTAVAILABILITY] ADD  DEFAULT ((0)) FOR [LASTINVENTTRANS]
GO

ALTER TABLE [dbo].[LOGISTICSADDRESSSCITY]
ADD
 [IBGECODE_BR] [nvarchar](7) NULL DEFAULT('')
GO

CREATE UNIQUE NONCLUSTERED INDEX [I_101297ITEMINVENTDIMIDX] ON [dbo].[RETAILINVENTAVAILABILITY] 
(
	[ITEMRECID] ASC,
	[INVENTDIMRECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

/*
 Add new columns LOGOPICTUREID2-5 RETAILTILLLAYOUT table.
*/

IF COL_LENGTH('dbo.RETAILTILLLAYOUT','LOGOPICTUREID2') IS NULL
BEGIN
    ALTER TABLE dbo.[RETAILTILLLAYOUT] ADD [LOGOPICTUREID2] INT NULL
    ALTER TABLE dbo.[RETAILTILLLAYOUT] ADD [LOGOPICTUREID3] INT NULL
    ALTER TABLE dbo.[RETAILTILLLAYOUT] ADD [LOGOPICTUREID4] INT NULL
    ALTER TABLE dbo.[RETAILTILLLAYOUT] ADD [LOGOPICTUREID5] INT NULL
END
GO

IF OBJECT_ID(N'dbo.LOGISTICSADDRESSFORMATLINES', N'U') IS NULL
BEGIN
	CREATE TABLE [dbo].[LOGISTICSADDRESSFORMATLINES](
		[ADDRFORMAT] [nvarchar](10) NOT NULL,
		[INACTIVE] [int] NOT NULL,
		[ELEMENT] [int] NOT NULL,
		[LINENUM] [numeric](32, 16) NOT NULL,
		[DATAENTRYONLY] [int] NOT NULL,
		[RECID] [bigint] NOT NULL,
	 CONSTRAINT [I_ADDRFORMATLINEIDX] PRIMARY KEY CLUSTERED 
	(
		[ADDRFORMAT] ASC,
		[LINENUM] ASC
	)
	) 
END
GO

ALTER TABLE [dbo].[LOGISTICSADDRESSFORMATLINES]  WITH NOCHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[LOGISTICSADDRESSFORMATLINES] ADD  DEFAULT ('') FOR [ADDRFORMAT]
GO

ALTER TABLE [dbo].[LOGISTICSADDRESSFORMATLINES] ADD  DEFAULT ((0)) FOR [INACTIVE]
GO

ALTER TABLE [dbo].[LOGISTICSADDRESSFORMATLINES] ADD  DEFAULT ((0)) FOR [ELEMENT]
GO

ALTER TABLE [dbo].[LOGISTICSADDRESSFORMATLINES] ADD  DEFAULT ((0)) FOR [LINENUM]
GO

ALTER TABLE [dbo].[LOGISTICSADDRESSFORMATLINES] ADD  DEFAULT ((0)) FOR [DATAENTRYONLY]
GO


IF OBJECT_ID(N'dbo.LOGISTICSADDRESSFORMATHEADING', N'U') IS NULL
BEGIN
	CREATE TABLE [dbo].[LOGISTICSADDRESSFORMATHEADING](
		[ADDRFORMAT] [nvarchar](10) NOT NULL,
		[NAME] [nvarchar](100) NOT NULL,
		[UPDATETOADDRESS] [int] NOT NULL,
		[RECID] [bigint] NOT NULL,
	 CONSTRAINT [I_ADDRFORMATIDX] PRIMARY KEY CLUSTERED 
	(
		[ADDRFORMAT] ASC
	)
	) 
END
GO

ALTER TABLE [dbo].[LOGISTICSADDRESSFORMATHEADING]  WITH NOCHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[LOGISTICSADDRESSFORMATHEADING] ADD  DEFAULT ('') FOR [ADDRFORMAT]
GO

ALTER TABLE [dbo].[LOGISTICSADDRESSFORMATHEADING] ADD  DEFAULT ('') FOR [NAME]
GO

ALTER TABLE [dbo].[LOGISTICSADDRESSFORMATHEADING] ADD  DEFAULT ((0)) FOR [UPDATETOADDRESS]
GO


IF OBJECT_ID(N'dbo.GetAddressFormatting', N'P') IS NULL
BEGIN
    EXEC ('CREATE PROCEDURE GetAddressFormatting AS (SELECT 1)');
    IF (@@ERROR = 0)
    BEGIN
        PRINT 'Successfully created stored procedure : GetAddressFormatting';
    END;
    ELSE
    BEGIN 
        PRINT 'Failed to create stored procedure: GetAddressFormatting';
    END;
END;
ELSE
BEGIN
    PRINT 'Skipped creating stored procedure: GetAddressFormatting';
END
GO

-- Returns only active field (INACTIVE == 0) with proper formatting metadata
ALTER PROCEDURE [dbo].[GetAddressFormatting]
	@CountryRegionId NVARCHAR(10)	
AS
BEGIN

SET NOCOUNT ON

SELECT   LAFL.ELEMENT, CAST(LAFL.LINENUM AS INT) AS LINEINDEX, LAFL.DATAENTRYONLY 
			FROM DBO.LOGISTICSADDRESSCOUNTRYREGION LACR 
				INNER JOIN DBO.LOGISTICSADDRESSFORMATHEADING LAFH ON LACR.ADDRFORMAT = LAFH.ADDRFORMAT
				INNER JOIN DBO.LOGISTICSADDRESSFORMATLINES LAFL ON LAFH.ADDRFORMAT = LAFL.ADDRFORMAT
				   WHERE  LAFL.INACTIVE = 0 AND LACR.COUNTRYREGIONID = @CountryRegionId
				    ORDER BY LINEINDEX ASC
END
GO

/*
 * Update RETAILTRANSACTIONSERVICEPROFILE table
 */
ALTER TABLE [dbo].[RETAILTRANSACTIONSERVICEPROFILE] ALTER COLUMN [CENTRALTABLESERVER] nvarchar(256) NOT NULL
GO
 
ALTER TABLE dbo.RETAILTRANSACTIONSERVICEPROFILE ADD
	SERVERCERTIFICATEDNS nvarchar(255) NOT NULL CONSTRAINT DF_RETAILTRANSACTIONSERVICEPROFILE_SERVERCERTIFICATEDNS DEFAULT (''),
	SERVERSERVICENAME nvarchar(50) NOT NULL CONSTRAINT DF_RETAILTRANSACTIONSERVICEPROFILE_SERVERSERVICENAME DEFAULT (''),
    PROTOCOL int NOT NULL CONSTRAINT DF_RETAILTRANSACTIONSERVICEPROFILE_PROTOCOL DEFAULT ((0)),
	SECURITYOFF int NOT NULL CONSTRAINT DF_RETAILTRANSACTIONSERVICEPROFILE_SECURITYOFF DEFAULT ((0))
GO

-- these should  NOT be NULL based on AX schema
-- first update existing rows with default values and then update the schema
UPDATE [dbo].[INVENTTABLEMODULE] SET [MARKUP]         = 0.0 WHERE [MARKUP] IS NULL
UPDATE [dbo].[INVENTTABLEMODULE] SET [PRICEQTY]       = 0.0 WHERE [PRICEQTY] IS NULL
UPDATE [dbo].[INVENTTABLEMODULE] SET [ALLOCATEMARKUP] = 0   WHERE [ALLOCATEMARKUP] IS NULL

ALTER TABLE [dbo].[INVENTTABLEMODULE] ALTER COLUMN [MARKUP] [numeric](32, 16) NOT NULL
ALTER TABLE [dbo].[INVENTTABLEMODULE] ALTER COLUMN [PRICEQTY] [numeric](32, 16) NOT NULL
ALTER TABLE [dbo].[INVENTTABLEMODULE] ALTER COLUMN [ALLOCATEMARKUP] [int] NOT NULL


IF  NOT EXISTS (SELECT * FROM sys.types st JOIN sys.schemas ss ON st.schema_id = ss.schema_id WHERE st.name = N'GETPRICEDISCOUNTDATA_PRICEGROUPS_TABLETYPE')
BEGIN
CREATE TYPE GETPRICEDISCOUNTDATA_PRICEGROUPS_TABLETYPE AS TABLE(PRICEGROUPID BIGINT NOT NULL);
END
GO

IF  NOT EXISTS (SELECT * FROM sys.types st JOIN sys.schemas ss ON st.schema_id = ss.schema_id WHERE st.name = N'FINDPRICEAGREEMENT_ACCOUNTRELATIONS_TABLETYPE')
BEGIN
CREATE TYPE FINDPRICEAGREEMENT_ACCOUNTRELATIONS_TABLETYPE AS TABLE(ACCOUNTRELATION NVARCHAR(20) NOT NULL);
END
GO

IF  NOT EXISTS (SELECT * FROM sys.types st JOIN sys.schemas ss ON st.schema_id = ss.schema_id WHERE st.name = N'FINDPROMOTIONPRICE_PRICEGROUPS_TABLETYPE')
BEGIN
CREATE TYPE FINDPROMOTIONPRICE_PRICEGROUPS_TABLETYPE AS TABLE(PRICEGROUPID BIGINT NOT NULL);
END
GO

/*
 * Add Channel to P-Job tables
 */
 ALTER TABLE [dbo].[RETAILPOSBATCHACCOUNTTRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILPOSBATCHTABLE]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILPOSBATCHTENDERTRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONBANKEDTENDERTRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONDISCOUNTTRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONINCOMEEXPENSETRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONINFOCODETRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0)),
    [REPLICATED] [int] NOT NULL DEFAULT ((0)),
    [REPLICATIONCOUNTER] [int] IDENTITY(1,1) NOT NULL
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONORDERINVOICETRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONPAYMENTTRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONSAFETENDERTRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONSALESTRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONTABLE]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONTAXTRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONTENDERDECLARATIONTRANS]
ADD 
    [CHANNEL] [bigint] NOT NULL DEFAULT ((0))
GO

/* Update Functionality profile table */
ALTER TABLE [dbo].[RETAILFUNCTIONALITYPROFILE] ADD
    [STAFFBARCODELOGONREQUIRESPASSWORD] [int] NULL DEFAULT ((0)),
    [STAFFCARDLOGONREQUIRESPASSWORD] [int] NULL DEFAULT ((0)),
    [AUDITENABLED] [int] NOT NULL DEFAULT((0)),
    [DECIMALNOTREQUIREDFORMINORCURRENCYUNIT] [int] NOT NULL DEFAULT ((0)),
    [DAYSCUSTOMERHISTORY] [int] NOT NULL DEFAULT ((0))
GO

/* Create new Extended logon table */
CREATE TABLE [dbo].[RETAILSTAFFEXTENDEDLOGON](
    [LOGONKEY] [nvarchar](256) NOT NULL CONSTRAINT [DF_RETAILSTAFFEXTENDEDLOGON_LOGONKEY]  DEFAULT ('') ,
    [LOGONTYPE] [int] NOT NULL CONSTRAINT [DF_RETAILSTAFFEXTENDEDLOGON_LOGONTYPE]  DEFAULT ((0)),
    [STAFF] [bigint] NOT NULL CONSTRAINT [DF_RETAILSTAFFEXTENDEDLOGON_STAFF]  DEFAULT ((0)),
    [EXTRADATA] [varbinary](max) NULL CONSTRAINT [DF_RETAILSTAFFEXTENDEDLOGON_EXTRADATA]  DEFAULT (null),
 CONSTRAINT [PK_RETAILSTAFFEXTENDEDLOGON] PRIMARY KEY CLUSTERED 
(
    [LOGONKEY] ASC,
    [LOGONTYPE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/* Migrate staff MSR logon from old table */
INSERT INTO RETAILSTAFFEXTENDEDLOGON (LOGONKEY, LOGONTYPE, STAFF)
    SELECT CARDNUMBER, 2/*MSR*/ , RECID
    FROM RBOMSRCARDTABLE M INNER JOIN RETAILSTAFFTABLE S ON M.LINKID = S.STAFFID
    WHERE LINKTYPE = 0

/*
 Remove DATAAREA from CURRENCY table.
*/

ALTER TABLE [dbo].[CURRENCY] DROP
	CONSTRAINT [DF__CURRENCY__DATAAR__2136E270],
	CONSTRAINT [I_047CURRENCYCODEIDX]
GO

DROP INDEX [I_047RECID] ON [dbo].[CURRENCY] WITH ( ONLINE = OFF )
GO

ALTER TABLE [CURRENCY] DROP COLUMN [DATAAREAID]
GO

ALTER TABLE [dbo].[CURRENCY] ADD CONSTRAINT [I_047CURRENCYCODEIDX] PRIMARY KEY CLUSTERED 
(
	[CURRENCYCODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

CREATE TABLE [dbo].[JMGIPCACTIVITY](
	[ACTIVITY] [nvarchar](10) NOT NULL,
	[CATEGORY] [nvarchar](10) NOT NULL,
	[JOBID] [nvarchar](20) NOT NULL,
	[SIGNIN] [int] NOT NULL,
	[BREAKDROP] [int] NOT NULL,
	[SIGNINOUT] [int] NOT NULL,
	[TYPE] [int] NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[RECVERSION] [int] NOT NULL,
	[PARTITION] [bigint] NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_8178ACTIDX] PRIMARY KEY NONCLUSTERED 
(
	[PARTITION] ASC,
	[DATAAREAID] ASC,
	[ACTIVITY] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[JMGIPCACTIVITY]  WITH NOCHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[JMGIPCACTIVITY] ADD  DEFAULT ('') FOR [ACTIVITY]
GO

ALTER TABLE [dbo].[JMGIPCACTIVITY] ADD  DEFAULT ('') FOR [CATEGORY]
GO

ALTER TABLE [dbo].[JMGIPCACTIVITY] ADD  DEFAULT ('') FOR [JOBID]
GO

ALTER TABLE [dbo].[JMGIPCACTIVITY] ADD  DEFAULT ((0)) FOR [SIGNIN]
GO

ALTER TABLE [dbo].[JMGIPCACTIVITY] ADD  DEFAULT ((0)) FOR [BREAKDROP]
GO

ALTER TABLE [dbo].[JMGIPCACTIVITY] ADD  DEFAULT ((0)) FOR [SIGNINOUT]
GO

ALTER TABLE [dbo].[JMGIPCACTIVITY] ADD  DEFAULT ((0)) FOR [TYPE]
GO

ALTER TABLE [dbo].[JMGIPCACTIVITY] ADD  DEFAULT ('dat') FOR [DATAAREAID]
GO

ALTER TABLE [dbo].[JMGIPCACTIVITY] ADD  DEFAULT ((1)) FOR [RECVERSION]
GO

ALTER TABLE [dbo].[JMGIPCACTIVITY] ADD  DEFAULT ((5637144576.)) FOR [PARTITION]
GO

/*
Additional columns separator and separatorCrLf for implementing address formatting in POS
*/
ALTER TABLE [dbo].[LOGISTICSADDRESSFORMATLINES] ADD
	[SEPARATOR] [nvarchar](10) NOT NULL DEFAULT (''),
	[SEPARATORCRLF] [int] NOT NULL DEFAULT (0)
GO

/*
Additional column to map transactions with sales order
*/
ALTER TABLE dbo.RETAILTRANSACTIONTABLE ADD
	SALESORDERID nvarchar(20) NOT NULL DEFAULT ('')
GO

DECLARE @deleteConstraintSql NVARCHAR(max);

SELECT @deleteConstraintSql = 'ALTER TABLE RETAILSTAFFTABLE DROP CONSTRAINT ' + sysObjects.[Name]
FROM sysObjects
INNER JOIN (SELECT [Name], [ID] FROM sysObjects WHERE XType = 'U') AS Tables ON Tables.[ID] = Sysobjects.[Parent_Obj] 
INNER JOIN sysconstraints ON sysconstraints.Constid = Sysobjects.[ID] 
INNER JOIN sysColumns ON sysColumns.[ColID] = sysconstraints.[ColID] AND sysColumns.[ID] = Tables.[ID]
WHERE Tables.name = 'RETAILSTAFFTABLE' and sysColumns.name = 'RETAILHCMWORKER'

EXEC sp_executesql @deleteConstraintSql
GO

ALTER TABLE [dbo].[RETAILSTAFFTABLE] DROP COLUMN [RETAILHCMWORKER]
GO

CREATE TABLE [dbo].[RETAILCHANNELCURRENCY](
	[CURRENCYCODE] [nvarchar](3) NOT NULL,
	[CHANNEL] [bigint] NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_101703RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[RETAILCHANNELCURRENCY]  WITH CHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE RETAILFUNCTIONALITYPROFILE
ADD 	
	[TAENABLEREGISTRATION] [int] NULL
GO

ALTER TABLE RETAILPOSPERMISSIONGROUP
ADD 	
	[VIEWTIMECLOCKENTRIES] [int] NULL
GO

DECLARE @deleteConstraintSql NVARCHAR(max);

WHILE EXISTS(SELECT sysObjects.[Name]
			FROM sysObjects
			INNER JOIN (SELECT [Name], [ID] FROM sysObjects WHERE XType = 'U') AS Tables ON Tables.[ID] = Sysobjects.[Parent_Obj] 
			INNER JOIN sysconstraints ON sysconstraints.Constid = Sysobjects.[ID] 
			INNER JOIN sysColumns ON sysColumns.[ColID] = sysconstraints.[ColID] AND sysColumns.[ID] = Tables.[ID]
			WHERE Tables.name = 'RETAILLOYALTYMSRCARDTABLE' and sysColumns.name IN ('ISSUEDPOINTS', 'USEDPOINTS', 'EXPIREDPOINTS', 'POINTSTATUS'))
BEGIN
	SELECT TOP 1 @deleteConstraintSql = 'ALTER TABLE RETAILLOYALTYMSRCARDTABLE DROP CONSTRAINT ' + sysObjects.[Name]
		FROM sysObjects
		INNER JOIN (SELECT [Name], [ID] FROM sysObjects WHERE XType = 'U') AS Tables ON Tables.[ID] = Sysobjects.[Parent_Obj] 
		INNER JOIN sysconstraints ON sysconstraints.Constid = Sysobjects.[ID] 
		INNER JOIN sysColumns ON sysColumns.[ColID] = sysconstraints.[ColID] AND sysColumns.[ID] = Tables.[ID]
		WHERE Tables.name = 'RETAILLOYALTYMSRCARDTABLE' and sysColumns.name IN ('ISSUEDPOINTS', 'USEDPOINTS', 'EXPIREDPOINTS', 'POINTSTATUS')
	EXEC sp_executesql @deleteConstraintSql
END
GO

ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTABLE]
	DROP COLUMN ISSUEDPOINTS, USEDPOINTS, EXPIREDPOINTS, POINTSTATUS 

GO

DROP VIEW [dbo].[RETAILSPECIALCATEGORYPRODUCTORVARIANT]
GO

/****** Similar to RETAILSPECIALCATEGORYPRODUCT view from AX, but shows all special categories associated with each variants ***********/
CREATE VIEW [dbo].[RETAILSPECIALCATEGORYVARIANT] AS
SELECT T3.RECID AS PRODUCT, T1.CATEGORY AS CATEGORY
FROM dbo.RETAILSPECIALCATEGORYMEMBER AS T1
    INNER JOIN dbo.RETAILGROUPMEMBERLINE AS T2 ON T2.RECID = T1.RETAILGROUPMEMBER
    INNER JOIN dbo.ECORESPRODUCT AS T3 ON T3.RECID = T2.VARIANT
GO

DROP VIEW [dbo].[RETAILPRODUCTORVARIANTCATEGORY]
GO

/*********** Shows products in retail category hierarchy and all special category hierarchies ******/
CREATE VIEW [dbo].[RETAILPRODUCTORVARIANTCATEGORY] AS 
SELECT T1.CATEGORY AS CATEGORY,T1.PRODUCT AS PRODUCT
FROM ECORESPRODUCTCATEGORY T1 
UNION 
SELECT T1.CATEGORY,T1.PRODUCT FROM [RETAILSPECIALCATEGORYVARIANT] T1
GO

/* Adding tax component of India tax codes */
ALTER TABLE [dbo].[TAXTABLE]
ADD
	        [TAXCOMPONENTTABLE_IN] [bigint] NOT NULL DEFAULT (0)
GO

/****** Creating View [dbo].[COMPANYINFO] ******/
CREATE TABLE [dbo].[COMPANYINFO](
	[DATAAREA] [nvarchar](4) NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_041RECID] PRIMARY KEY NONCLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[COMPANYINFO]  WITH NOCHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[COMPANYINFO] ADD  DEFAULT ('') FOR [DATAAREA]
GO

/****** Creating View [dbo].[TAXINFORMATIONLEGALENTITY_IN] ******/
CREATE TABLE [dbo].[TAXINFORMATIONLEGALENTITY_IN](
	[LEGALENTITY] [bigint] NOT NULL,
	[PANNUMBER] [nvarchar](10) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_101162RECID] PRIMARY KEY NONCLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[TAXINFORMATIONLEGALENTITY_IN]  WITH NOCHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[TAXINFORMATIONLEGALENTITY_IN] ADD  DEFAULT ((0)) FOR [LEGALENTITY]
GO

ALTER TABLE [dbo].[TAXINFORMATIONLEGALENTITY_IN] ADD  DEFAULT ('') FOR [PANNUMBER]
GO

ALTER TABLE [dbo].[TAXINFORMATIONLEGALENTITY_IN] ADD  DEFAULT ('') FOR [DATAAREAID]
GO

/****** Creating View [dbo].[INVENTLOCATIONLOGISTICSLOCATION] ******/
CREATE TABLE [dbo].[INVENTLOCATIONLOGISTICSLOCATION](
	[INVENTLOCATION] [bigint] NOT NULL,
	[LOCATION] [bigint] NOT NULL,
	[ISPRIMARY] [int] NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_3510RECID] PRIMARY KEY NONCLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[INVENTLOCATIONLOGISTICSLOCATION]  WITH NOCHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[INVENTLOCATIONLOGISTICSLOCATION] ADD  DEFAULT ((0)) FOR [INVENTLOCATION]
GO

ALTER TABLE [dbo].[INVENTLOCATIONLOGISTICSLOCATION] ADD  DEFAULT ((0)) FOR [LOCATION]
GO

ALTER TABLE [dbo].[INVENTLOCATIONLOGISTICSLOCATION] ADD  DEFAULT ((0)) FOR [ISPRIMARY]
GO

/****** Creating View [dbo].[TAXINFORMATION_IN] ******/
CREATE TABLE [dbo].[TAXINFORMATION_IN](
	[TIN] [bigint] NOT NULL,
	[REGISTRATIONLOCATION] [bigint] NOT NULL,
	[STCREGISTRATIONNUMBERTABLE] [bigint] NOT NULL,
	[ECCNUMBER] [bigint] NOT NULL,
	[ISPRIMARY] [int] NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_9644RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[TAXINFORMATION_IN]  WITH NOCHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[TAXINFORMATION_IN] ADD  DEFAULT ((0)) FOR [TIN]
GO

ALTER TABLE [dbo].[TAXINFORMATION_IN] ADD  DEFAULT ((0)) FOR [REGISTRATIONLOCATION]
GO

ALTER TABLE [dbo].[TAXINFORMATION_IN] ADD  DEFAULT ((0)) FOR [STCREGISTRATIONNUMBERTABLE]
GO

ALTER TABLE [dbo].[TAXINFORMATION_IN] ADD  DEFAULT ((0)) FOR [ECCNUMBER]
GO

ALTER TABLE [dbo].[TAXINFORMATION_IN] ADD  DEFAULT ((0)) FOR [ISPRIMARY]
GO

/****** Creating View [dbo].[TAXREGISTRATIONNUMBERS_IN] ******/
CREATE TABLE [dbo].[TAXREGISTRATIONNUMBERS_IN](
	[REGISTRATIONNUMBER] [nvarchar](15) NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_101168RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[TAXREGISTRATIONNUMBERS_IN]  WITH NOCHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[TAXREGISTRATIONNUMBERS_IN] ADD  DEFAULT ('') FOR [REGISTRATIONNUMBER]
GO

/****** Creating View [dbo].[TAXCOMPONENTTABLE_IN] ******/
CREATE TABLE [dbo].[TAXCOMPONENTTABLE_IN](
	[COMPONENT] [nvarchar](15) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[RECID] [bigint] NOT NULL,
 CONSTRAINT [I_9031RECID] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[TAXCOMPONENTTABLE_IN]  WITH NOCHECK ADD CHECK  (([RECID]<>(0)))
GO

ALTER TABLE [dbo].[TAXCOMPONENTTABLE_IN] ADD  DEFAULT ('') FOR [COMPONENT]
GO

ALTER TABLE [dbo].[TAXCOMPONENTTABLE_IN] ADD  DEFAULT ('') FOR [DATAAREAID]
GO

/* Add receipt settings of retail stores */
ALTER TABLE [dbo].[RETAILSTORETABLE_IN]
ADD
	[TAXDETAILSTYPE] [int] NOT NULL DEFAULT (0),
	[SHOWTAXONTAX] [int] NOT NULL DEFAULT (0)
GO

ALTER TABLE [dbo].[LOGISTICSELECTRONICADDRESS]
ADD 
    [DESCRIPTION] nvarchar(60) NOT NULL DEFAULT(''),
    [ISPRIMARY] int NOT NULL DEFAULT (0),
    [ISPRIVATE] int NOT NULL DEFAULT (0)
GO

ALTER TABLE [dbo].[LOGISTICSPOSTALADDRESS]
ADD 
    [ISPRIVATE] int NOT NULL DEFAULT (0)
GO

CREATE NONCLUSTERED INDEX [I_INVENTTABLE_11_1044198770__K52_K1_K51_K2] ON [dbo].[INVENTTABLE] 
(
	[DATAAREAID] ASC,
	[ITEMID] ASC,
	[PRODUCT] ASC,
	[ITEMNAME] ASC
)WITH (SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [I_INVENTITEMGROUPITEM_11_1940201962__K2_K1] ON [dbo].[INVENTITEMGROUPITEM] 
(
	[ITEMDATAAREAID] ASC,
	[ITEMID] ASC
)WITH (SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [I_ECORESPRODUCTTRANSLATION_11_1277299660__K4_K3_2] ON [dbo].[ECORESPRODUCTTRANSLATION] 
(
	[LANGUAGEID] ASC,
	[PRODUCT] ASC
)
INCLUDE ( [NAME]) WITH (SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [I_CUSTTABLE_11_1102626971__K71_K1] ON [dbo].[CUSTTABLE] 
(
	[PARTY] ASC,
	[ACCOUNTNUM] ASC
)WITH (SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [I_DIRPARTYTABLE_11_1591728773__K14_K1] ON [dbo].[DIRPARTYTABLE] 
(
	[RECID] ASC,
	[NAME] ASC
)WITH (SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [I_LOGISTICSELECTRONICADDRESS_11_128771566__K1_K4_K10] ON [dbo].[LOGISTICSELECTRONICADDRESS] 
(
	[LOCATOR] ASC,
	[LOCATION] ASC,
	[TYPE] ASC
)WITH (SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [I_LOGISTICSPOSTALADDRESS_11_1168775271__K1_K16] ON [dbo].[LOGISTICSPOSTALADDRESS] 
(
	[ADDRESS] ASC,
	[LOCATION] ASC
)WITH (SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [I_ECORESCATEGORY_11_653297437__K1_K5_K3_K20] ON [dbo].[ECORESCATEGORY] 
(
	[CATEGORYHIERARCHY] ASC,
	[ISACTIVE] ASC,
	[NAME] ASC,
	[RECID] ASC
)WITH (SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
GO

DECLARE @constraintSql NVARCHAR(max);

WHILE EXISTS(SELECT sysObjects.[Name]
			FROM sysObjects
			INNER JOIN (SELECT [Name], [ID] FROM sysObjects WHERE XType = 'D') AS Tables ON Tables.[ID] = Sysobjects.[Parent_Obj] 
			INNER JOIN sysconstraints ON sysconstraints.Constid = Sysobjects.[ID] 
			INNER JOIN sysColumns ON sysColumns.[ColID] = sysconstraints.[ColID] AND sysColumns.[ID] = Tables.[ID]
			WHERE Tables.name = 'RETAILOFFLINETABLECOLUMNS' and sysColumns.name IN ('RECID', 'SYNCCOLUMNNAME', 'SYNCTABLE', 'RECVERSION'))
BEGIN
	SELECT TOP 1 @constraintSql = 'ALTER TABLE RETAILLOYALTYMSRCARDTABLE DROP CONSTRAINT ' + sysObjects.[Name]
		FROM sysObjects
		INNER JOIN (SELECT [Name], [ID] FROM sysObjects WHERE XType = 'U') AS Tables ON Tables.[ID] = Sysobjects.[Parent_Obj] 
		INNER JOIN sysconstraints ON sysconstraints.Constid = Sysobjects.[ID] 
		INNER JOIN sysColumns ON sysColumns.[ColID] = sysconstraints.[ColID] AND sysColumns.[ID] = Tables.[ID]
		WHERE Tables.name = 'RETAILOFFLINETABLECOLUMNS' and sysColumns.name IN ('RECID', 'SYNCCOLUMNNAME', 'SYNCTABLE', 'RECVERSION')
	EXEC sp_executesql @constraintSql
END
GO

DROP TABLE RETAILOFFLINETABLECOLUMNS
GO


-- [Section: transaction tables index fix]
-- The following transaction (P-job) tables should have these changes:
--   1. drop the original incorrect clustered index
--   2. create clustered index on REPLICATIONCOUNTER field
--   3. add back original primary key as non-clustered index
--   4. rebuild index
-- RETAILPOSBATCHACCOUNTTRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILPOSBATCHACCOUNTTRANS]') AND name = N'PK_RetailPosBatchAccountTrans')
ALTER TABLE [dbo].[RETAILPOSBATCHACCOUNTTRANS] DROP CONSTRAINT [PK_RetailPosBatchAccountTrans]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILPOSBATCHACCOUNTTRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILPOSBATCHACCOUNTTRANS] ADD  CONSTRAINT [PK_RetailPosBatchAccountTrans] PRIMARY KEY NONCLUSTERED 
(
	[STOREID] ASC,
	[TERMINALID] ASC,
	[BATCHID] ASC,
	[ACCOUNTNUM] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILPOSBATCHACCOUNTTRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO

-- RETAILPOSBATCHTABLE
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILPOSBATCHTABLE]') AND name = N'PK_RETAILPOSBATCHTABLE')
ALTER TABLE [dbo].[RETAILPOSBATCHTABLE] DROP CONSTRAINT [PK_RETAILPOSBATCHTABLE]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILPOSBATCHTABLE]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILPOSBATCHTABLE] ADD  CONSTRAINT [PK_RETAILPOSBATCHTABLE] PRIMARY KEY NONCLUSTERED 
(
	[STOREID] ASC,
	[TERMINALID] ASC,
	[DATAAREAID] ASC,
	[BATCHID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILPOSBATCHTABLE]',
	[I_REPLICATIONCOUNTERIDX]
)
GO


-- RETAILPOSBATCHTENDERTRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILPOSBATCHTENDERTRANS]') AND name = N'PK_RETAILPosBatchTenderTrans')
ALTER TABLE [dbo].[RETAILPOSBATCHTENDERTRANS] DROP CONSTRAINT [PK_RETAILPosBatchTenderTrans]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILPOSBATCHTENDERTRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILPOSBATCHTENDERTRANS] ADD  CONSTRAINT [PK_RETAILPosBatchTenderTrans] PRIMARY KEY NONCLUSTERED 
(
	[STOREID] ASC,
	[TERMINALID] ASC,
	[BATCHID] ASC,
	[TENDERTYPEID] ASC,
	[CARDTYPEID] ASC,
	[CURRENCY] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILPOSBATCHTENDERTRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO


-- RETAILTRANSACTIONBANKEDTENDERTRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONBANKEDTENDERTRANS]') AND name = N'I_20338TRANSACTIONLINEIDX')
ALTER TABLE [dbo].[RETAILTRANSACTIONBANKEDTENDERTRANS] DROP CONSTRAINT [I_20338TRANSACTIONLINEIDX]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONBANKEDTENDERTRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONBANKEDTENDERTRANS] ADD  CONSTRAINT [I_20338TRANSACTIONLINEIDX] PRIMARY KEY NONCLUSTERED 
(
	[DATAAREAID] ASC,
	[STORE] ASC,
	[TERMINAL] ASC,
	[TRANSACTIONID] ASC,
	[LINENUM] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONBANKEDTENDERTRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO


-- RETAILTRANSACTIONTENDERDECLARATIONTRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONTENDERDECLARATIONTRANS]') AND name = N'I_20165TRANSACTIONLINEIDX')
ALTER TABLE [dbo].[RETAILTRANSACTIONTENDERDECLARATIONTRANS] DROP CONSTRAINT [I_20165TRANSACTIONLINEIDX]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONTENDERDECLARATIONTRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONTENDERDECLARATIONTRANS] ADD  CONSTRAINT [I_20165TRANSACTIONLINEIDX] PRIMARY KEY NONCLUSTERED 
(
	[DATAAREAID] ASC,
	[TRANSACTIONID] ASC,
	[LINENUM] ASC,
	[STORE] ASC,
	[TERMINAL] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONTENDERDECLARATIONTRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO


-- RETAILTRANSACTIONDISCOUNTTRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONDISCOUNTTRANS]') AND name = N'I_100433DISCTRANSIDX')
ALTER TABLE [dbo].[RETAILTRANSACTIONDISCOUNTTRANS] DROP CONSTRAINT [I_100433DISCTRANSIDX]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONDISCOUNTTRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONDISCOUNTTRANS] ADD  CONSTRAINT [I_100433DISCTRANSIDX] PRIMARY KEY NONCLUSTERED 
(
	[DATAAREAID] ASC,
	[STOREID] ASC,
	[TERMINALID] ASC,
	[TRANSACTIONID] ASC,
	[SALELINENUM] ASC,
	[PERIODICDISCOUNTOFFERID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONDISCOUNTTRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO


-- RETAILTRANSACTIONINCOMEEXPENSETRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONINCOMEEXPENSETRANS]') AND name = N'I_20158TRANSACTIONLINEIDX')
ALTER TABLE [dbo].[RETAILTRANSACTIONINCOMEEXPENSETRANS] DROP CONSTRAINT [I_20158TRANSACTIONLINEIDX]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONINCOMEEXPENSETRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONINCOMEEXPENSETRANS] ADD  CONSTRAINT [I_20158TRANSACTIONLINEIDX] PRIMARY KEY NONCLUSTERED 
(
	[DATAAREAID] ASC,
	[TRANSACTIONID] ASC,
	[LINENUM] ASC,
	[STORE] ASC,
	[TERMINAL] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONINCOMEEXPENSETRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO



-- RETAILTRANSACTIONINFOCODETRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONINFOCODETRANS]') AND name = N'I_20159TRANSTYPELINEINFOC20001')
ALTER TABLE [dbo].[RETAILTRANSACTIONINFOCODETRANS] DROP CONSTRAINT [I_20159TRANSTYPELINEINFOC20001]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONINFOCODETRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONINFOCODETRANS] ADD  CONSTRAINT [I_20159TRANSTYPELINEINFOC20001] PRIMARY KEY NONCLUSTERED 
(
	[DATAAREAID] ASC,
	[TRANSACTIONID] ASC,
	[TYPE] ASC,
	[LINENUM] ASC,
	[INFOCODEID] ASC,
	[STORE] ASC,
	[TERMINAL] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONINFOCODETRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO

-- RETAILTRANSACTIONLOYALTYPOINTSTRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS]') AND name = N'PK_RETAILTRANSACTIONLOYALTYPOINTSTRANS')
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] DROP CONSTRAINT [PK_RETAILTRANSACTIONLOYALTYPOINTSTRANS]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO

-- RETAILTRANSACTIONMARKUPTRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONMARKUPTRANS]') AND name = N'I_101234RECID')
ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] DROP CONSTRAINT [I_101234RECID]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONMARKUPTRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONMARKUPTRANS] ADD  CONSTRAINT [I_101234RECID] PRIMARY KEY NONCLUSTERED 
(
	[DATAAREAID] ASC,
	[STORE] ASC,
	[TERMINALID] ASC,
	[TRANSACTIONID] ASC,
	[SALELINENUM] ASC,
	[MARKUPLINENUM] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONMARKUPTRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO

-- RETAILTRANSACTIONORDERINVOICETRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONORDERINVOICETRANS]') AND name = N'I_20357TRANSACTIONLINEIDX')
ALTER TABLE [dbo].[RETAILTRANSACTIONORDERINVOICETRANS] DROP CONSTRAINT [I_20357TRANSACTIONLINEIDX]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONORDERINVOICETRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONORDERINVOICETRANS] ADD  CONSTRAINT [I_20357TRANSACTIONLINEIDX] PRIMARY KEY NONCLUSTERED 
(
	[DATAAREAID] ASC,
	[STOREID] ASC,
	[TERMINALID] ASC,
	[TRANSACTIONID] ASC,
	[LINENUM] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONORDERINVOICETRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO

-- RETAILTRANSACTIONPAYMENTTRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONPAYMENTTRANS]') AND name = N'I_20162TRANSACTIONLINEIDX')
ALTER TABLE [dbo].[RETAILTRANSACTIONPAYMENTTRANS] DROP CONSTRAINT [I_20162TRANSACTIONLINEIDX]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONPAYMENTTRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONPAYMENTTRANS] ADD  CONSTRAINT [I_20162TRANSACTIONLINEIDX] PRIMARY KEY NONCLUSTERED 
(
	[TRANSACTIONID] ASC,
	[LINENUM] ASC,
	[STORE] ASC,
	[TERMINAL] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONPAYMENTTRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO


-- RETAILTRANSACTIONSAFETENDERTRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONSAFETENDERTRANS]') AND name = N'I_20379TRANSACTIONLINEIDX')
ALTER TABLE [dbo].[RETAILTRANSACTIONSAFETENDERTRANS] DROP CONSTRAINT [I_20379TRANSACTIONLINEIDX]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONSAFETENDERTRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONSAFETENDERTRANS] ADD  CONSTRAINT [I_20379TRANSACTIONLINEIDX] PRIMARY KEY NONCLUSTERED 
(
	[DATAAREAID] ASC,
	[STORE] ASC,
	[TERMINAL] ASC,
	[TRANSACTIONID] ASC,
	[LINENUM] ASC,
	[STATEMENTID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONSAFETENDERTRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO

-- RETAILTRANSACTIONSALESTRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONSALESTRANS]') AND name = N'I_20163TRANSACTIONLINEIDX')
ALTER TABLE [dbo].[RETAILTRANSACTIONSALESTRANS] DROP CONSTRAINT [I_20163TRANSACTIONLINEIDX]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONSALESTRANS] 
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONSALESTRANS] ADD  CONSTRAINT [I_20163TRANSACTIONLINEIDX] PRIMARY KEY NONCLUSTERED 
(
	[TRANSACTIONID] ASC,
	[LINENUM] ASC,
	[STORE] ASC,
	[TERMINALID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONSALESTRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO


-- RETAILTRANSACTIONTABLE
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONTABLE]') AND name = N'I_20164REPLICATIONCOUNTERIDX')
DROP INDEX [I_20164REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONTABLE] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONTABLE]') AND name = N'I_20164TRANSACTIONIDX')
ALTER TABLE [dbo].[RETAILTRANSACTIONTABLE] DROP CONSTRAINT [I_20164TRANSACTIONIDX]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONTABLE] 
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONTABLE] ADD  CONSTRAINT [I_20164TRANSACTIONIDX] PRIMARY KEY NONCLUSTERED 
(
	[TRANSACTIONID] ASC,
	[STORE] ASC,
	[TERMINAL] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONTABLE]',
	[I_REPLICATIONCOUNTERIDX]
)
GO

-- RETAILTRANSACTIONTAXTRANS
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILTRANSACTIONTAXTRANS]') AND name = N'I_17729TAXTRANSIDX')
ALTER TABLE [dbo].[RETAILTRANSACTIONTAXTRANS] DROP CONSTRAINT [I_17729TAXTRANSIDX]
GO

CREATE CLUSTERED INDEX [I_REPLICATIONCOUNTERIDX] ON [dbo].[RETAILTRANSACTIONTAXTRANS]
(
	[REPLICATIONCOUNTER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONTAXTRANS] ADD  CONSTRAINT [I_17729TAXTRANSIDX] PRIMARY KEY NONCLUSTERED 
(
	[DATAAREAID] ASC,
	[TERMINALID] ASC,
	[STOREID] ASC,
	[TRANSACTIONID] ASC,
	[SALELINENUM] ASC,
	[TAXCODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

DBCC DBREINDEX
(
	'[dbo].[RETAILTRANSACTIONTAXTRANS]',
	[I_REPLICATIONCOUNTERIDX]
)
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONTAXTRANS] ALTER COLUMN [TRANSACTIONID] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[INVENTITEMGTIN] ALTER COLUMN [GTIN] [numeric](32, 16) NOT NULL
GO
ALTER TABLE [dbo].[RetailTransactionIncomeExpenseTrans] ALTER COLUMN [TransactionId] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RetailTransactionInfocodeTrans] ALTER COLUMN [TransactionId] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RetailTransactionMarkupTrans] ALTER COLUMN [TRANSACTIONID] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONORDERINVOICETRANS] ALTER COLUMN [TRANSACTIONID] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONSAFETENDERTRANS] ALTER COLUMN [TRANSACTIONID] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONTABLE] ALTER COLUMN [CHANNELREFERENCEID] [nvarchar](50) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONTABLE] ALTER COLUMN [TRANSACTIONID] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RetailTransactionLoyaltyPointsTrans] ALTER COLUMN [TRANSACTIONID] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONPAYMENTTRANS] ALTER COLUMN [TRANSACTIONID] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONSALESTRANS] ALTER COLUMN [TRANSACTIONID] [nvarchar](44) NOT NULL 
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONSALESTRANS] ALTER COLUMN [RETURNTRANSACTIONID] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONSALESTRANS] ALTER COLUMN [RETURNQTY] [numeric](32, 16) NOT NULL
GO
ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTRANS] ALTER COLUMN [TRANSACTIONID] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RETAILLOYALTYCUSTTABLE] ALTER COLUMN [CUSTNAME] [nvarchar](100) NOT NULL
GO
ALTER TABLE [dbo].[INVENTTABLEMODULE] ALTER COLUMN [MAXIMUMRETAILPRICE_IN] [numeric](32, 16) NOT NULL
GO
ALTER TABLE [dbo].[RETAILFUNCTIONALITYPROFILE] ALTER COLUMN [CENTRALTABLESERVER] [nvarchar](256) NOT NULL
GO
ALTER TABLE [dbo].[TAXONITEM] ALTER COLUMN [ABATEMENTPERCENT_IN] [numeric](32, 16) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONDISCOUNTTRANS] ALTER COLUMN [TRANSACTIONID] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONBANKEDTENDERTRANS] ALTER COLUMN [TRANSACTIONID] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONTENDERDECLARATIONTRANS] ALTER COLUMN [TRANSACTIONID] [nvarchar](44) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ALTER COLUMN [CARDNUMBER] [nvarchar](30) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  DEFAULT (('')) FOR [CARDNUMBER]
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ALTER COLUMN [DATEOFISSUE] [datetime] NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  DEFAULT(('1900-01-01 00:00:00.000')) FOR [DATEOFISSUE]
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ALTER COLUMN [ENTRYTYPE] [int] NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  DEFAULT((0)) FOR [ENTRYTYPE]
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ALTER COLUMN [EXPIRATIONDATE] [datetime] NOT NULL 
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  DEFAULT(('1900-01-01 00:00:00.000')) FOR [EXPIRATIONDATE]
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ALTER COLUMN [LOYALTYCUSTID] [nvarchar](10) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  DEFAULT (('')) FOR [LOYALTYCUSTID]
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ALTER COLUMN [LOYALTYSCHEMEID] [nvarchar](10) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  DEFAULT (('')) FOR [LOYALTYSCHEMEID]
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ALTER COLUMN [POINTS] [numeric](32, 16) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  DEFAULT ((0)) FOR [POINTS]
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ALTER COLUMN [RECEIPTID] [nvarchar](18) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  DEFAULT (('')) FOR [RECEIPTID]
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ALTER COLUMN [STAFFID] [nvarchar](25) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  DEFAULT (('')) FOR [STAFFID]
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ALTER COLUMN [STOREID] [nvarchar](10) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  DEFAULT (('')) FOR [STOREID]
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ALTER COLUMN [TERMINALID] [nvarchar](10) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  DEFAULT (('')) FOR [TERMINALID]
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ALTER COLUMN [LINENUM] [numeric](32,16) NOT NULL
GO
ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  DEFAULT ((0)) FOR [LINENUM]
GO

ALTER TABLE [dbo].[RETAILTRANSACTIONLOYALTYPOINTSTRANS] ADD  CONSTRAINT [PK_RETAILTRANSACTIONLOYALTYPOINTSTRANS] PRIMARY KEY NONCLUSTERED 
(
	[TRANSACTIONID] ASC,
	[LINENUM] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RETAILSTAFFTABLE] 
ADD 
[MODIFIEDDATETIME] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000')
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOSTAFFT__MODIF__4152A4FA]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF__RBOSTAFFT__MODIF__4152A4FA]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOSTAFFT__MODIF__405E80C1]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILSTAFFTABLE] DROP CONSTRAINT [DF__RBOSTAFFT__MODIF__405E80C1]
END
GO

ALTER TABLE [dbo].[RETAILSTAFFTABLE] 
DROP 
COLUMN [MODIFIEDDATE],
COLUMN [MODIFIEDTIME]
GO

/* Rename OperatorCultur column */
sp_rename 'RETAILSTAFFTABLE.OPERATORCULTURE', 'CULTURENAME', 'COLUMN'
GO

CREATE VIEW [dbo].[RETAILSTAFFVIEW]
AS
SELECT     T1.STAFFID, T1.CHANGEPASSWORD, T1.CONTINUEONTSERRORS, T1.EMPLOYMENTTYPE, T1.LAYOUTID, T1.NAMEONRECEIPT, T1.PASSWORD, 
                      T1.PASSWORDDATA, T1.RECID, T2.RECID AS RETAILHCMWORKER, T1.VISUALPROFILE, T1.CULTURENAME
FROM         dbo.RETAILSTAFFTABLE AS T1 INNER JOIN
                      dbo.HCMWORKER AS T2 ON T1.STAFFID = T2.PERSONNELNUMBER
GO
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RETAILBARCODEMASKTABLE]') AND name = N'I_20090PREFIXIDX')
DROP INDEX [I_20090PREFIXIDX] ON [dbo].[RETAILBARCODEMASKTABLE] WITH ( ONLINE = OFF )
GO

ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTABLE] 
ADD 
[MODIFIEDDATETIME] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
[CREATEDDATETIME] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000')
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOLOYALT__CREAT__3EC810AE]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTABLE] DROP CONSTRAINT [DF__RBOLOYALT__CREAT__3EC810AE]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOLOYALT__CREAT__3FBC34E7]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTABLE] DROP CONSTRAINT [DF__RBOLOYALT__CREAT__3FBC34E7]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOLOYALT__MODIF__3BEBA403]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTABLE] DROP CONSTRAINT [DF__RBOLOYALT__MODIF__3BEBA403]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOLOYALT__MODIF__3CDFC83C]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTABLE] DROP CONSTRAINT [DF__RBOLOYALT__MODIF__3CDFC83C]
END
GO

ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTABLE]
DROP
	COLUMN [MODIFIEDDATE],
	COLUMN [MODIFIEDTIME],
	COLUMN [CREATEDDATE],
	COLUMN [CREATEDTIME]
GO

ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTRANS] 
ADD 
[MODIFIEDDATETIME] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
[CREATEDDATETIME] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000')
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOLOYALT__CREAT__597C06EA]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTRANS] DROP CONSTRAINT [DF__RBOLOYALT__CREAT__597C06EA]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOLOYALT__CREAT__5A702B23]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTRANS] DROP CONSTRAINT [DF__RBOLOYALT__CREAT__5A702B23]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOLOYALT__MODIF__569F9A3F]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTRANS] DROP CONSTRAINT [DF__RBOLOYALT__MODIF__569F9A3F]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOLOYALT__MODIF__5793BE78]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTRANS] DROP CONSTRAINT [DF__RBOLOYALT__MODIF__5793BE78]
END
GO

ALTER TABLE [dbo].[RETAILLOYALTYMSRCARDTRANS]
DROP
	COLUMN [MODIFIEDDATE],
	COLUMN [MODIFIEDTIME],
	COLUMN [CREATEDDATE],
	COLUMN [CREATEDTIME]
GO

ALTER TABLE [dbo].[RETAILLOYALTYSCHEMESTABLE] 
ADD 
[MODIFIEDDATETIME] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000'),
[CREATEDDATETIME] [datetime] NOT NULL DEFAULT ('1900-01-01 00:00:00.000')
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOLOYALT__CREAT__0B13627E]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILLOYALTYSCHEMESTABLE] DROP CONSTRAINT [DF__RBOLOYALT__CREAT__0B13627E]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOLOYALT__CREAT__0C0786B7]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILLOYALTYSCHEMESTABLE] DROP CONSTRAINT [DF__RBOLOYALT__CREAT__0C0786B7]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOLOYALT__MODIF__0836F5D3]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILLOYALTYSCHEMESTABLE] DROP CONSTRAINT [DF__RBOLOYALT__MODIF__0836F5D3]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__RBOLOYALT__MODIF__092B1A0C]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[RETAILLOYALTYSCHEMESTABLE] DROP CONSTRAINT [DF__RBOLOYALT__MODIF__092B1A0C]
END
GO

ALTER TABLE [dbo].[RETAILLOYALTYSCHEMESTABLE]
DROP
	COLUMN [MODIFIEDDATE],
	COLUMN [MODIFIEDTIME],
	COLUMN [CREATEDDATE],
	COLUMN [CREATEDTIME]
GO

DROP Table ACCESSRIGHTSLIST
GO

DROP Table ADDRESSCOUNTRYREGION
GO

DROP Table ADDRESSSTATE
Go

DROP Table ADDRESSZIPCODE
Go

DROP Table EMPLTABLE
Go

DROP Table PERSONTITLETABLE
Go

DROP Table POSISBACKUPSERVICEPARAMS
Go

DROP Table POSISUPDATEAPPLICATION
Go

DROP Table POSISUPDATEFILES
Go

DROP Table POSISUPDATESCRIPT
Go

DROP Table POSISUPDATESFILES
Go

DROP Table POSISUPDATESMASTER
Go

DROP Table POSMMLINEGROUPS
Go

DROP Table RETAILSPECIALGROUPITEMS
Go

DROP Table USERGROUPINFO
Go

DROP Table USERGROUPLIST
Go

DROP Table USERINFO
Go

DROP Table ADDRESS
Go
-- [Section: transaction tables index fix] -- end

DROP TABLE RETAILTRANSACTIONLOYALTYPOINTTRANS
GO

/* Add Max. retail price to price/discount agreements */
ALTER TABLE [dbo].[PRICEDISCTABLE]
ADD
	[MAXIMUMRETAILPRICE_IN] [numeric](32, 16) NOT NULL DEFAULT (0)
GO

CREATE FUNCTION [dbo].[GETRETAILPRODUCTCATEGORYHIERARCHY] (
	@ITEMID NVARCHAR(20)
)
RETURNS @CATEGORYHIERARCHIES TABLE
(
	[RECID]					[BIGINT]			NOT NULL,
	[CATEGORYNAME]			[NVARCHAR](254)		NOT NULL,
	[PARENTCATEGORYID]		[BIGINT]			NULL,
	[CATEGORYLEVEL]			[INT]
)
AS
BEGIN

	DECLARE @PRODUCTCATEGORYID			BIGINT
	DECLARE @CATEGORYHIERARCHYID		BIGINT
	DECLARE @CATEGORYID					BIGINT
	DECLARE @CATEGORYNAME				NVARCHAR(254)
	DECLARE @PARENTCATEGORYID			BIGINT
	DECLARE @CATEGORYLEVEL				INT

	SET @CATEGORYLEVEL = 0

	SELECT
		@CATEGORYHIERARCHYID = ECORESCATEGORYHIERARCHYROLE.CATEGORYHIERARCHY
	FROM
		ECORESCATEGORYHIERARCHYROLE
	WHERE
		NAMEDCATEGORYHIERARCHYROLE = 4

	SELECT
		@PRODUCTCATEGORYID = ECORESPRODUCTCATEGORY.CATEGORY
	FROM
		ECORESPRODUCTCATEGORY
		INNER JOIN ECORESPRODUCT
				ON ECORESPRODUCTCATEGORY.PRODUCT = ECORESPRODUCT.RECID
		INNER JOIN INVENTTABLE
				ON ECORESPRODUCT.RECID = INVENTTABLE.PRODUCT
	WHERE
		ECORESPRODUCTCATEGORY.CATEGORYHIERARCHY = @CATEGORYHIERARCHYID
		AND
		INVENTTABLE.ITEMID = @ITEMID

	SELECT
		@CATEGORYID = RECID,
		@PARENTCATEGORYID = PARENTCATEGORY,
		@CATEGORYNAME = NAME
	FROM
		ECORESCATEGORY
	WHERE
		RECID = @PRODUCTCATEGORYID
		AND
		CATEGORYHIERARCHY = @CATEGORYHIERARCHYID

	WHILE
		@PARENTCATEGORYID >= 0
	BEGIN
		INSERT INTO
				@CATEGORYHIERARCHIES
				(RECID, CATEGORYNAME, PARENTCATEGORYID, CATEGORYLEVEL)
		VALUES
				(@CATEGORYID, @CATEGORYNAME, @PARENTCATEGORYID, @CATEGORYLEVEL)

		IF @PARENTCATEGORYID = 0
				SET @PARENTCATEGORYID = -1

		SELECT
				@CATEGORYID = RECID,
				@PARENTCATEGORYID = PARENTCATEGORY,
				@CATEGORYNAME = NAME
		FROM
				ECORESCATEGORY
		WHERE
				RECID = @PARENTCATEGORYID
				AND CATEGORYHIERARCHY = @CATEGORYHIERARCHYID

		SET @CATEGORYLEVEL -= 1

	END

	UPDATE
		@CATEGORYHIERARCHIES
	SET
		CATEGORYLEVEL -= @CATEGORYLEVEL + 1

	RETURN
END
GO

/*
 * Update RetailTransactionInfocodeTrans with additional sales/payment line reference field
 */
IF NOT EXISTS 
	(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RETAILTRANSACTIONINFOCODETRANS' AND COLUMN_NAME = 'PARENTLINENUM')
BEGIN
ALTER TABLE [dbo].[RETAILTRANSACTIONINFOCODETRANS] ADD
	[PARENTLINENUM] [numeric](32,16) NOT NULL DEFAULT ((-1))
END
GO
